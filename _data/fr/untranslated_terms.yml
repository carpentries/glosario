- slug: abstract_syntax_tree
  fr:
    def: 'A deeply nested data structure, or [tree](#tree), that represents the structure
      of a program. For example, the AST might have a [node](#node) representing a
      [`while` loop](#while_loop) with one [child](#child_tree) representing the loop
      condition and another representing the [loop body](#loop_body).

      '
    term: abstract syntax tree
- slug: algorithmic_bias
  fr:
    def: 'Repeatable results that show bias, or skewed treatment, found in an [algorithm](#algorithm).
      For example, social media algorithms may prioritize or stigmatize content from
      certain groups of users.

      '
    term: algorithmic bias
- slug: anaconda
  fr:
    def: 'Anaconda is a [software distribution](#software_distribution) of R and Python.
      It is also a [repository](#repository) of open-source Python and R programs
      for data science, packaged using the [conda](#conda) [package manager](#package_manager).
      Anaconda also creates Anaconda Navigator, a suite of desktop tools including
      an [IDE](#ide) and the [Jupyter Notebook](#jupyter_notebook) application.

      '
    term: Anaconda
- slug: artificial_intelligence
  fr:
    def: 'Intelligence demonstrated by machines, as opposed to humans or other animals.
      AI can be exhibited through perceiving, synthesizing and inference of information.
      Example tasks include [natural language processing](#nlp), computer vision,
      and [machine learning] (#machine_learning).

      '
    term: artificial intelligence (AI)
- slug: assertion
  fr:
    def: 'A [Boolean](#boolean) expression that must be [true](#true) at a certain
      point in a program. Assertions may be built into the language (e.g., [Python](#python)''s
      `assert` statement) or provided as functions (e.g., [R](#r_language)''s `stopifnot`).
      They are often used in testing, but are also put in [production code](#production_code)
      to check that it is behaving correctly. In many languages, assertions should
      not be used to perform data validation as they may be silently dropped by compilers
      and interpreters under optimization conditions. Using assertions for data validation
      can therefore introduce security risks. Unlike many languages, R does not have
      an `assert` statement which can be disabled, and so use of a [package](#package)
      such as `assertr` for data validation does not create security holes.

      '
    term: assertion
- slug: associative_array
  fr:
    def: 'See [dictionary](#dictionary).

      '
    term: associative array
- slug: automatic_variable
  fr:
    def: 'A variable that is automatically given a value in a [build rule](#build_rule).
      For example, Make automatically assigns the name of a rule''s [target](#build_target)
      to the automatic variable `$@`. Automatic variables are frequently used when
      writing [pattern rules](#pattern_rule).

      '
    term: automatic variable
- slug: bayes_rule
  fr:
    def: 'See [Bayes'' Theorem](#bayes_theorem).

      '
    term: Bayes' Rule
- slug: bayes_theorem
  fr:
    def: 'An equation for calculating the probability that something is [true](#true)
      if something related to it is true. If P(X) is the probability that X is true
      and P(X`|`Y) is the probability that X is true given Y is true, then P(X`|`Y)
      = P(Y`|`X) * P(X) / P(Y).

      '
    term: Bayes' Theorem
- slug: bayesian_network
  fr:
    def: 'A graph that represents the relationships among random variables for a given
      problem.

      '
    term: Bayesian network
- slug: binary_expression
  fr:
    def: 'An expression which has two parameters and takes two arguments, such as
      `1 + 2`.

      '
    term: binary expression
- slug: blob
  fr:
    def: 'Data that is stored in a database without being interpreted in any way,
      such as an audio file. The term is also now used to refer to data transferred
      over a network or stored in a [version control](#version_control_system) [repository](#repository)
      as uninterpreted bits.

      '
    term: binary large object
- slug: binomial_distribution
  fr:
    def: 'A [probability distribution](#probability_distribution) that arises when
      there are a fixed number of trials, each of which can produce one of two outcomes,
      and the probability of those outcomes does not change. As the number of trials
      increases, the binomial distribution approximates a [normal distribution](#normal_distribution).

      '
    term: binomial distribution
- slug: block_comment
  fr:
    def: 'A [comment](#comment) that spans multiple lines. Block comments may be marked
      with special start and end symbols, like `/*` and `*/` in C and its descendents,
      or each line may be prefixed with a marker like `#`.

      '
    term: block comment
- slug: boilerplate
  fr:
    def: 'Standard text that is included in legal contracts, licenses, and so on.
      Also parts of the source code that have to be repeated very often to get basic
      functionality. In [object-oriented programs](#oop) these segments are used to
      encapsulate variables of objects. Some languages require a lot of these statements
      and are termed boilerplate languages, e.g. Java, which means that they are frequently
      generated automatically or by using [auto-completion](#auto_completion).

      '
    term: boilerplate
- slug: boolean
  fr:
    def: 'Relating to a variable or data type that can have either a logical value
      of [true](#true) or [false](#false). Named for George Boole, a 19th century
      mathematician. Binary systems, like all computers, are built on this foundation
      of systems of logical evaluations between states of true and false, 1 or 0.

      '
    term: Boolean
- slug: branch
  fr:
    def: 'See [Git branch](#git_branch).

      '
    term: branch
- slug: branch_per_feature_workflow
  fr:
    def: 'A common strategy for managing work with [Git](#git) and other [version
      control systems](#version_control_system) in which a separate [branch](#git_branch)
      is created for work on each new feature or each [bug](#bug) fix and merged when
      that work is completed. This isolates changes from one another until they are
      completed.

      '
    term: branch-per-feature workflow
- slug: breadcrumbs
  fr:
    def: 'A set of supplementary navigational links included in many websites, usually
      placed at the top of the page. Breadcrumbs show the users where the current
      page lies in the website; the term comes from a fairy tale in which children
      left a trail of breadcrumbs behind themselves so that they could find their
      way home.

      '
    term: breadcrumbs
- slug: breadth_first
  fr:
    def: 'To go through a nested data structure such as a [tree](#tree) by exploring
      all of one level, then going on to the next level and so on, or to explore a
      problem by examining the first step of each possible solution, and then trying
      the next step for each.

      '
    term: breadth first
- slug: browser_cache
  fr:
    def: 'A place where web browsers keep copies of previously retrieved files (web
      pages, data files) in order to save time when they''re requested again. Sometimes,
      issues may arise if there is a newer version of the file online, but the browser
      doesn''t notice it.

      '
    term: browser cache
- slug: bug
  fr:
    def: 'A missing or undesirable [feature](#feature_software) of a piece of software;
      the digital equivalent of a weed.

      '
    term: bug
- slug: bug_report
  fr:
    def: 'A collection of files, [logs](#log), or related information that describes
      either an unexpected output of some code or program, or an unexpected error
      or warning. This information is used to help find and fix a [bug](#bug) in the
      program or code.

      '
    term: bug report
- slug: bug_tracker
  fr:
    def: 'A system that tracks and manages [reported bugs](#bug_report) for a software
      program, to make it easier to address and fix the [bugs](#bug).

      '
    term: bug tracker
- slug: build_manager
  fr:
    def: 'A program that keeps track of how files depend on one another and runs commands
      to update any files that are out-of-date. Build managers were invented to [compile](#compile)
      only those parts of programs that had changed, but are now often used to implement
      workflows in which plots depend on results files, which in turn depend on raw
      data files or configuration files.

      '
    term: build manager
- slug: build_recipe
  fr:
    def: 'The part of a [build rule](#build_rule) that describes how to update something
      that has fallen out-of-date.

      '
    term: build recipe
- slug: build_rule
  fr:
    def: 'A specification for a [build manager](#build_manager) that describes how
      some files depend on others and what to do if those files are out-of-date.

      '
    term: build rule
- slug: build_target
  fr:
    def: 'The file(s) that a [build rule](#build_rule) will update if they are out-of-date
      compared to their [dependencies](#dependency).

      '
    term: build target
- slug: byte_code
  fr:
    def: 'A set of instructions designed to be executed efficiently by an [interpreter](#interpreter).

      '
    term: byte code
- slug: cache
  fr:
    def: 'Something that stores copies of data so that future requests for it can
      be satisfied more quickly. The CPU in a computer uses a hardware cache to hold
      recently-accessed values; many programs rely on a software cache to reduce network
      traffic and latency. Figuring out when something in a cache is out-of-date and
      should be replaced is one of the [two hard problems in computer science](#two_hard_problems).

      '
    term: cache
- slug: caching
  fr:
    def: 'To save a copy of some data in a local [cache](#cache) to make future access
      faster.

      '
    term: caching
- slug: callback
  fr:
    def: 'A function A that is passed to another function B so that B can call it
      at some later point. Callbacks can be used [synchronously](#synchronous), as
      in generic functions like `map` that invoke a callback function once for each
      element in a collection, or [asynchronously](#asynchronous), as in a [client](#client)
      that runs a callback when a [response](#http_response) is received in answer
      to a [request](#http_request).

      '
    term: callback function
- slug: camel_case
  fr:
    def: 'A style of writing code that involves naming variables and objects with
      no space, underscore (`_`), dot (`.`), or dash (`-`) characters, with each word
      being capitalized. Examples include `CalculateSum` and `findPattern`.

      '
    term: camel case
- slug: catch_exception
  fr:
    def: 'To accept responsibility for handling an error or other unexpected event.
      [R](#r_language) prefers "handling a condition" to "catching an exception."
      [Python](#python), on the other hand, encourages raising and catching exceptions,
      and in some situations, requires it.

      '
    term: catch (an exception)
- slug: cc_0
  fr:
    def: 'A [Creative Commons](#cc_license) [license](#license) waiver that imposes
      no restrictions whatsover, thereby putting a work in the public domain.

      '
    term: CC-0
- slug: cc_by
  fr:
    def: 'The [Creative Commons](#cc_license) - Attribution [license](#license), which
      requires people to give credit to the author of a work, but imposes no other
      restrictions.

      '
    term: CC-BY
- slug: cpu
  fr:
    def: 'The principal hardware of any digital computer. The CPU constitutes the
      essential electronic circuitry that interprets and executes instructions from
      the software or other hardware. Also called a central processor, main processor,
      or microprocessor.

      '
    term: Central Processing Unit
- slug: centroid
  fr:
    def: 'The center or anchor of a group created by a [clustering](#clustering) algorithm.

      '
    term: centroid
- slug: character_encoding
  fr:
    def: 'A specification of how characters are stored as bytes. The most commonly-used
      encoding today is [UTF-8](#utf_8).

      '
    term: character encoding
- slug: chi_square_test
  fr:
    def: 'A statistical method for estimating whether two variables in a cross tabulation
      are [correlated](#correlation). A chi-square distribution varies from a [normal
      distribution](#normal_distribution) based on the [degrees of freedom](#degrees_of_freedom)
      used to calculate it.

      '
    term: chi-square test
- slug: child_tree
  fr:
    def: 'A [node](#node) in a [tree](#node) that is below another node (call the
      [parent](#parent_tree)).

      '
    term: child (in a tree)
- slug: child_class
  fr:
    def: 'In [object-oriented programming](#oop), a [class](#class) derived from another
      class (called the [parent class](#parent_class)).

      '
    term: child class
- slug: class
  fr:
    def: 'In [object-oriented programming](#oop), a structure that combines data and
      operations (called [methods](#method)). The program then uses a [constructor](#constructor)
      to create an [object](#object) with those properties and methods. Programmers
      generally put generic or reusable behavior in [parent classes](#parent_class),
      and more detailed or specific behavior in [child classes](#child_class).

      '
    term: class
- slug: class_imbalance
  fr:
    def: 'Class imbalance refers to the problem in [machine learning](machine_learning)
      where there is an unequal distribution of classes in the dataset.

      '
    term: class imbalance
- slug: classification
  fr:
    def: 'The process of identifying which predefined category an item belongs to,
      such as deciding whether an email message is spam or not. Many [machine learning](#machine_learning)
      algorithms perform classification.

      '
    term: classification
- slug: client
  fr:
    def: 'Typically, a program such as a web browser that gets data from a [server](#server)
      and displays it to, or interacts with, users. The term is used more generally
      to refer to any program A that makes requests of another program B. A single
      program can be both a client and a server.

      '
    term: client
- slug: closure
  fr:
    def: 'A set of variables defined in the same [scope](#scope) whose existence has
      been preserved after that scope has ended.

      '
    term: closure
- slug: clustering
  fr:
    def: 'The process of dividing data into groups when the groups themselves are
      not known in advance.

      '
    term: clustering
- slug: code_coverage
  fr:
    def: 'How much of a [library](#library) or program is executed when tests run.
      This is normally reported as a percentage of lines of code: for example, if
      40 out of 50 lines in a file are run during testing, those tests have 80% code
      coverage.

      '
    term: code coverage (in testing)
- slug: code_review
  fr:
    def: 'To check a program or a change to a program by inspecting its source code.

      '
    term: code review
- slug: coercion
  fr:
    def: 'See [type coercion](#type_coercion).

      '
    term: coercion
- slug: cognitive_load
  fr:
    def: 'The amount of working memory needed to accomplish a set of simultaneous
      tasks.

      '
    term: cognitive load
- slug: collection
  fr:
    def: 'An abstract data type that groups an arbitrary, variable number of data
      items (possibly zero), to allow processing them in a uniform fashion. Common
      examples of collections are lists, variable-size arrays and sets. Fixed-size
      arrays are usually not considered collections.

      '
    term: collection
- slug: csv
  fr:
    def: 'A text format for tabular data in which each [record](#record) is one row
      and [fields](#field) are separated by commas. There are many minor variations,
      particularly around quoting of [strings](#string).

      '
    term: comma-separated values
- slug: command
  fr:
    def: 'An instruction telling a computer program to perform a specific task.

      '
    term: command
- slug: command_history
  fr:
    def: 'An automatically created list of previously executed commands. Most read-eval-print
      loops ([REPLs](#repl)), including the [Unix shell](#shell), record history and
      allow users to play back recent commands.

      '
    term: command history
- slug: command_line_argument
  fr:
    def: 'A filename or control flag given to a command-line program when it is run.

      '
    term: command-line argument
- slug: cli
  fr:
    def: 'A user interface that relies solely on text for commands and output, typically
      running in a [shell](#shell).

      '
    term: command-line interface
- slug: commit
  fr:
    def: 'As a verb, the act of saving a set of changes to a database or [version
      control](#version_control_system) [repository](#repository). As a noun, the
      changes saved.

      '
    term: commit
- slug: commit_message
  fr:
    def: 'A comment attached to a [commit](#commit) that explains what was done and
      why.

      '
    term: commit message
- slug: compile
  fr:
    def: 'To translate textual source into another form. Programs in [compiled languages](#compiled_language)
      are translated into machine instructions for a computer to run, and [Markdown](#markdown)
      is usually translated into [HTML](#html) for display.

      '
    term: compile
- slug: compiled_language
  fr:
    def: 'Originally, a language such as C or Fortran that is translated into machine
      instructions for execution. Languages such as Java are also compiled before
      execution, but into [byte code](#byte_code) instead of machine instructions,
      while [interpreted languages](#interpreted_language) like [Python](#python)
      are compiled to byte code on the fly.

      '
    term: compiled language
- slug: compiler
  fr:
    def: 'An application that translates programs written in some languages into machine
      instructions or [byte code](#byte_code).

      '
    term: compiler
- slug: cran
  fr:
    def: 'A public repository of [R](#r_language) packages.

      '
    term: Comprehensive R Archive Network
- slug: computational_linguistics
  fr:
    def: 'The study or application of computational methods for [parsing](#parse)
      or understanding human languages. Early approaches were algorithmic; most modern
      approaches are statistical.

      '
    term: computational linguistics
- slug: computational_notebook
  fr:
    def: 'A combination of a document format that allows users to mix prose and code
      in a single file, and an application that executes that code interactively and
      in place. The [Jupyter Notebook](#jupyter_notebook) and [R Markdown](#r_markdown)
      files are both examples of computational notebooks.

      '
    term: computational notebook
- slug: compute_shader
  fr:
    def: 'A general purpose [shader](#shader) program for use in parallel processing.
      Often used for [machine learning](#machine_learning), simulations, and other
      fields which benifit from parallel computation.

      '
    term: compute shader
- slug: concatenate
  fr:
    def: 'In general programming, to join two [strings](#string) or [collections](#collection)
      together. In terms of data tables (for example, a [python](#python) pandas DataFrame
      or R tibble), append/stack two tables by either columns (axis=1) or rows (axis=0)
      by end-to-end joining of data.

      '
    term: Concatenate
- slug: conda
  fr:
    def: 'A [package manager](#package_manager) and environment management system,
      particularly popular for Python programs.

      '
    term: conda
- slug: condition
  fr:
    def: 'An error or other unexpected event that disrupts the normal flow of control.

      '
    term: condition
- slug: conditional_expression
  fr:
    def: 'A [ternary expression](#ternary_expression) that serves the role of an if/else
      statement. For example, C and similar languages use the syntax `test : ifTrue
      ? ifFalse` to mean "choose the value `ifTrue` if `test` is true, or the value
      `ifFalse` if it is not."

      '
    term: conditional expression
- slug: confidence_interval
  fr:
    def: 'A range around an estimate that indicates the margin of error, combined
      with a probability that the actual value falls in that range.

      '
    term: confidence interval
- slug: configuration_file
  fr:
    def: 'A file that specifies the parameters and initial settings of a software
      program. Configuration, or config, files are often used for information subject
      to changes, such as environment-specific settings.

      '
    term: configuration file
- slug: confusion_matrix
  fr:
    def: 'A NxN matrix that describes the performance of a classification model, where
      N is the number of classes or outputs. Each row in the matrix represents the
      instances of actual classes and each column represents the predicted classes.
      For a binary classification model the confusion matrix gives the True Positives
      (TP), False Negatives (FN), False Positives (FP) and True Negatives (TN) in
      the 1st, 2nd, 3rd and 4th quadrants, respectively. The table can be used to
      calculate [Accuracy](#accuracy), [Sensitivity](#sensitivity) and [Specificity](#specificity)
      amongst other measures of the model.

      '
    term: confusion matrix
- slug: console
  fr:
    def: 'A computer terminal where a user may enter commands, or a program, such
      as a shell that simulates such a device.

      '
    term: console
- slug: constructor
  fr:
    def: 'A function that creates an [object](#object) of a particular [class](#class).
      In the [S3](#s3) object system, constructors are a convention rather than a
      requirement.

      '
    term: constructor
- slug: continuation_prompt
  fr:
    def: 'A [prompt](#prompt) that indicates that the command currently being typed
      is not yet complete, and will not be run until it is.

      '
    term: continuation prompt
- slug: continuous_integration
  fr:
    def: 'A software development practice in which changes are automatically merged
      as soon as they become available.

      '
    term: continuous integration
- slug: continuous_random_variable
  fr:
    def: 'A [variable](#variable_data) whose value can be any real value, either within
      a range, or unbounded, such as age or distance.

      '
    term: continuous random variable
- slug: control_flow
  fr:
    def: 'The logical flow through a program''s code. May be linear (i.e. just a series
      of commands), but may also include [loops](#loop) or conditional execution (i.e.
      if a condition is met).

      '
    term: control flow
- slug: cnn
  fr:
    def: 'A class of artificial neural network that is primarily used to analyze images.
      A CNN has layers that perform convolutions, where a filter is shifted over the
      data, instead of the general matrix multiplications that we see in fully connected
      neural network layers.

      '
    term: convolutional neural network (cnn)
- slug: copy_on_modify
  fr:
    def: 'The practice of creating a new copy of aliased data whenever there is an
      attempt to modify it so that each reference will believe theirs is the only
      one.

      '
    term: copy-on-modify
- slug: cc_license
  fr:
    def: 'A set of [licenses](#license) that can be applied to published work. Each
      license is formed by concatenating one or more of `-BY` (Attribution): users
      must cite the original source; `-SA` (ShareAlike): users must share their own
      work under a similar license; `-NC` (NonCommercial): work may not be used for
      commercial purposes without the creator''s permission; `-ND` (NoDerivatives):
      no derivative works (e.g., translations) can be created without the creator''s
      permission. Thus, `CC-BY-NC` means "users must give attribution and cannot use
      commercially without permission." The term `CC-0` (zero, not letter ''O'') is
      sometimes used to mean "no restrictions," i.e., the work is in the public domain.

      '
    term: Creative Commons license
- slug: cross_join
  fr:
    def: 'A [join](#join) that produces all possible combinations of rows from two
      tables.

      '
    term: cross join
- slug: cross_validation
  fr:
    def: 'A technique that divides data into [training data](t#raining_data) and [test
      data](#test_data). The training data and correct answers are used to find [parameters](#parameter),
      and the algorithm''s effectiveness is then measured by examining the answers
      it gives on the test data.

      '
    term: cross-validation
- slug: cryptographic_hash_function
  fr:
    def: 'A [hash function](#hash_function) that produces a random value for any input.

      '
    term: cryptographic hash function
- slug: data_collison
  fr:
    def: 'Occurs when  when two or more devices or nodes try to transmit signals at
      the same time on the same network. Similarly a data collision can also occur
      when [hashing](#hash_function) if two distinct pieces of data have the same
      hash value.

      '
    term: data collison
- slug: data_engineer
  fr:
    def: 'Someone who sets up and runs data analyses. Data engineers are often responsible
      for installing software, managing databases, generating reports, and archiving
      results.

      '
    term: data engineer
- slug: data_engineering
  fr:
    def: 'The pragmatic steps taken to make data usable, such as writing short programs
      to put mailing addresses in a uniform format.

      '
    term: data engineering
- slug: data_masking
  fr:
    def: 'Altering data in a dataset to anonymize or otherwise remove identifying
      information. For example, real names might be swapped out with fictional names
      to provide name-based data without referencing actual people.

      '
    term: data masking
- slug: data_mining
  fr:
    def: 'The use of computers to search for patterns in large datasets. The term
      [data science](#data_science) is now more commonly used.

      '
    term: data mining
- slug: data_package
  fr:
    def: 'A software package that, mostly, contains only data. Is used to make it
      simpler to disseminate data for easier use.

      '
    term: data package
- slug: data_science
  fr:
    def: 'The combination of statistics, programming, and hard work used to extract
      knowledge from data.

      '
    term: data science
- slug: data_scientist
  fr:
    def: 'Someone who uses programming skills to solve statistical problems.

      '
    term: data scientist
- slug: data_structure
  fr:
    def: 'A format for the organisation, management, and efficient access of data.
      Typically it will characterise a set of data values and their representation
      (or [encoding](#character_encoding)), the relationships between values, and
      ways to access or manipulate those data, such as reading, altering, or writing.

      '
    term: data structure
- slug: data_visualization
  fr:
    def: 'The creation of charts, maps, graphs, or infographics to translate datasets
      into something visual. Sometimes called "dataviz" or "data viz."

      '
    term: data visualization
- slug: data_wrangling
  fr:
    def: 'A colloquial name for small-scale [data engineering](#data_engineering).

      '
    term: data wrangling
- slug: debug
  fr:
    def: 'In a computer environment ''debug'' refers to the process of finding and
      resolving errors (also known as ''bugs'') within computer programs or systems.

      '
    term: debug
- slug: decision_tree
  fr:
    def: 'A tree whose [nodes](#node) are questions and whose [branches](#branch)
      eventually lead to a decision or [classification](#classification).

      '
    term: decision tree
- slug: decorator_pattern
  fr:
    def: 'A [design pattern](#design_pattern) in which a function adds additional
      features to another function or a [class](#class) after its initial definition.
      Decorators are a feature of [Python](#python) and can be implemented in most
      other languages as well.

      '
    term: Decorator pattern
- slug: decrement
  fr:
    def: 'A unary operation that decreases the value of a variable, usually by 1.

      '
    term: decrement
- slug: deep_learning
  fr:
    def: 'A family of [neural network](#neural_network) algorithms that use multiple
      layers to extract features at successively higher levels.

      '
    term: deep learning
- slug: default_target
  fr:
    def: 'The [build target](#build_target) that is used when none is specified explicitly.

      '
    term: default target
- slug: default_value
  fr:
    def: 'A value assigned to a function [parameter](#parameter) when the caller does
      not specify a value. Default values are specified as part of the function''s
      definition.

      '
    term: default value
- slug: defensive_programming
  fr:
    def: 'A set of programming practices that assumes mistakes will happen and either
      reports or corrects them, such as inserting [assertions](#assertion) to report
      situations that are not ever supposed to occur.

      '
    term: defensive programming
- slug: degrees_of_freedom
  fr:
    def: 'In statistics, the degrees of freedom (often "DF") is a measure of how much
      independent information, in the form data and calculations, has been combined
      to produce a given statistical parameter. Put another way, the DF is the number
      of values that are free to vary in the calculation of a given statistical parameter.
      For a statistic calculated from data which are indepdendent (i.e., the values
      are uncorrelated), the DF can be generally estimated as the sample size minus
      the number of individual parameters calculated to obtain the final statistic.

      '
    term: degrees of freedom
- slug: delegate_pattern
  fr:
    def: 'A [design pattern](#design_pattern) in which an [object](#object) does most
      of the work to complete a task, but uses one of a set of other objects to complete
      some specific parts of the work. Delegation is often used instead of inheritance
      to customize objects'' behavior.

      '
    term: Delegate pattern
- slug: dependency
  fr:
    def: 'See [prerequisite](#prerequisite).

      '
    term: dependency
- slug: dependent_variable
  fr:
    def: 'A variable whose value depends on the value of another variable, which is
      called the [independent variable](#independent_variable).

      '
    term: dependent variable
- slug: depth_first
  fr:
    def: 'To go through a nested data structure such as a [tree](#tree) by going as
      far as possible down one path, then as far as possible down the next and so
      on, or to explore a problem by following one solution to its conclusion and
      then trying the next.

      '
    term: depth first
- slug: design_pattern
  fr:
    def: 'A recurring pattern in software design that is specific enough to be worth
      naming, but not so specific that a single best implementation can be provided
      by a [library](#library). For example, [data frames](#data_frame) and database
      [tables](#table) are instances of the same pattern.

      '
    term: design pattern
- slug: destructuring_assignment
  fr:
    def: 'Unpacking values from data structures and assigning them to multiple variables
      in a single statement.

      '
    term: destructuring assignment
- slug: dictionary
  fr:
    def: 'A data structure that allows items to be looked up by value, sometimes called
      an [associative array](#associative_array). Dictionaries are often implemented
      using [hash tables](#hash_table).

      '
    term: dictionary
- slug: doi
  fr:
    def: 'A unique persistent identifier for a book, paper, report, dataset, software
      release, or other digital artefact.

      '
    term: Digital Object Identifier
- slug: dimension_reduction
  fr:
    def: 'Reducing the number of dimensions in a dataset, typically by finding the
      dimensions along which it varies most.

      '
    term: dimension reduction
- slug: directory
  fr:
    def: 'An item within a [filesystem](#filesystem) that can contain files and other
      directories. Also known as a [folder](#folder).

      '
    term: directory
- slug: discrete_random_variable
  fr:
    def: 'A [variable](#variable_data) whose value can take on only one of a fixed
      set of values, such as [true](#true) or [false](#false).

      '
    term: discrete random variable
- slug: distro
  fr:
    def: 'See [software distribution](#software_distribution).

      '
    term: distro
- slug: docstring
  fr:
    def: 'Short for "documentation string," a string appearing at the start of a module,
      class, or function in [Python](#python) that automatically becomes that object''s
      documentation.

      '
    term: docstring
- slug: dom
  fr:
    def: 'A standard, in-memory representation of [HTML](#html) and [XML](#xml). Each
      [element](#element) is stored as a [node](#node) in a [tree](#tree) with a set
      of named [attributes](#attribute); contained elements are [child nodes](#child_tree).
      Modern programming languages provide many [libraries](#library) for searching
      and modifying the DOM.

      '
    term: Document Object Model
- slug: documentation_generator
  fr:
    def: 'A software tool that extracts specially formatted comments or [dostrings](#docstring)
      from code and generates cross-referenced developer documentation.

      '
    term: documentation generator
- slug: dom_selector
  fr:
    def: 'A pattern that identifies [nodes](#node) in a [DOM](#dom) [tree](#tree).
      For example, `#alpha` matches nodes whose `id` [attribute](#attribute) is "alpha",
      while `.beta` matches nodes whose `class` [attribute](#attribute) is "beta".

      '
    term: DOM selector
- slug: domain_knowledge
  fr:
    def: 'Understanding of a specific problem domain, e.g., knowledge of transportation
      logistics.

      '
    term: domain knowledge
- slug: dry
  fr:
    def: "The Don't Repeat Yourself (DRY) principle states that \u2014 Every piece\
      \ of knowledge must have a single, unambiguous, authoritative representation\
      \ within a system. The term comes from The Pragmatic Programmer, by Andrew Hunt\
      \ and David Thomas. Programs that follow the DRY Principle avoid duplication\
      \ of definitions and logic, so that a change in their behaviour only requires\
      \ each modification to be made in one part of the code. The goal is to create\
      \ code that is easier to maintain.\n"
    term: Don't Repeat Yourself principle
- slug: double
  fr:
    def: 'Short for "double-precision floating-point number", meaning a 64-bit numeric
      value with a fractional part and an exponent.

      '
    term: double
- slug: double_square_brackets
  fr:
    def: 'An index enclosed in `[[...]]`, used to return a single value of the underlying
      type.

      '
    term: double square brackets
- slug: down_vote
  fr:
    def: 'A vote against something.

      '
    term: down-vote
- slug: dynamic_loading
  fr:
    def: 'To [import](#import) a [module](#module) into the memory of a program while
      it is already running. Most [interpreted languages](#interpreted_language) use
      dynamic loading, and provide tools so that programs can find and load modules
      dynamically to configure themselves.

      '
    term: dynamic loading
- slug: dynamic_lookup
  fr:
    def: 'To find a function or a property of an [object](#object) by name while a
      program is running. For example, instead of getting a specific property of an
      object using `obj.name`, a program might use `obj[someVariable]`, where `someVariable`
      could hold `"name"` or some other property name.

      '
    term: dynamic lookup
- slug: dynamic_scoping
  fr:
    def: 'To find the value of a [variable](#variable_program) by looking at what
      is on the [call stack](#call_stack) at the moment the lookup is done. Almost
      all programming languages use [lexical_scoping](#lexical_scoping) instead, since
      it is more predictable.

      '
    term: dynamic scoping
- slug: edge
  fr:
    def: 'A connection between two [nodes](#node) in a [graph](#graph). An edge may
      have data associated with it, such as a name or distance.

      '
    term: edge
- slug: email
  fr:
    def: 'Electronic mail is a method for delivering messages between people over
      a computer network. Messages are sent via an [SMTP](#smtp) server and retrieved
      using either an [IMAP](#imap) or [POP](#pop) server.

      '
    term: Electronic mail
- slug: element
  fr:
    def: 'A named component in an [HTML](#html) or [XML](#xml) document. Elements
      are usually written `<name>`...`</name>`, where "..." represents the content
      of the element. Elements often have [attributes](#attribute).

      '
    term: element
- slug: emacs
  fr:
    def: 'A text editor that is popular among Unix programmers.

      '
    term: Emacs (editor)
- slug: empty_element
  fr:
    def: 'An [element](#element) of an [HTML](#html) or [XML](#xml) document that
      has no [children](#child_tree). Empty elements can always be written as `<name></name>`,
      but may also be written using the shorthand notation `<name/>` (with a slash
      after the name inside the angle brackets).

      '
    term: empty element
- slug: encoding
  fr:
    def: 'The process of putting a sequence of characters such as letters, numbers,
      punctuation, and certain symbols, into a specialized format for efficient transmission
      or storage.

      '
    term: encoding
- slug: epoch_dl
  fr:
    def: 'In [deep learning](#deep_learning), an epoch is one cycle in the deep learning
      process where all the training data has been fed to the algorithm once. Training
      a deep neural networks usually consists of multiple epochs.

      '
    term: epoch (deep learning)
- slug: error_test
  fr:
    def: 'Signalled when something goes wrong in a [unit test](#unit_test) itself
      rather than in the system being tested. In this case, we do not know anything
      about the correctness of the system.

      '
    term: error (in a test)
- slug: error_handling
  fr:
    def: 'What a program does to detect and correct for errors. Examples include printing
      a message and using a default configuration if the user-specified configuration
      cannot be found.

      '
    term: error handling
- slug: escape_sequence
  fr:
    def: 'A sequence of characters added as a prefix to some other character that
      would otherwise have a special meaning, temporarily altering the meaning of
      the character. For example, the escape sequence `\"` is used to represent a
      double-quote character inside a double-quoted string.

      '
    term: escape sequence
- slug: evaluation
  fr:
    def: 'The process of taking an expression such as `1+2*3/4` and turning it into
      a single, irreducible value.

      '
    term: evaluation
- slug: exception
  fr:
    def: 'An object that stores information about an error or other unusual event
      in a program. One part of a program will create and [raise an exception](#raise_exception)
      to signal that something unexpected has happened; another part will [catch](#catch_exception)
      it.

      '
    term: exception
- slug: exception_handler
  fr:
    def: 'A piece of code that deals with an [exception](#exception) after it is [caught](#catch_exception),
      e.g., by writing a [log message](#log_message), retrying the operation that
      failed, or performing an alternate operation.

      '
    term: exception handler
- slug: expected_result
  fr:
    def: 'The value that a piece of software is supposed to produce when tested in
      a certain way, or the state in which it is supposed to leave the system.

      '
    term: expected result (of test)
- slug: exploratory_programming
  fr:
    def: 'A software development methodology in which requirements emerge or change
      as the software is being written, often in response to results from early runs.

      '
    term: exploratory programming
- slug: export
  fr:
    def: 'To make something visible outside a [module](#module) so that other parts
      of a program can [import](#import) it. In most languages a module must export
      things explicitly in an attempt to avoid [name collision](#name_collision).

      '
    term: export
- slug: fail_test
  fr:
    def: 'A test fails if the [actual result](#actual_result) does not match the [expected
      result](#expected_result).

      '
    term: fail (a test)
- slug: 'false'
  fr:
    def: 'The logical ([Boolean](#boolean)) state opposite of "[true](#true)". Used
      in logic and programming to represent a [binary](#binary) state of something.

      '
    term: 'false'
- slug: false_negative
  fr:
    def: 'Data points which are actually [true](#true) but incorrectly predicted as
      [false](#false).

      '
    term: false negative
- slug: false_positive
  fr:
    def: 'Data points which are actually [false](#false) but incorrectly predicted
      as [true](#true).

      '
    term: false positive
- slug: falsy
  fr:
    def: 'Evaluating to [false](#false) in a [Boolean](#boolean) context.

      '
    term: falsy
- slug: fasta
  fr:
    def: "A file format for storing amino acid or genomic sequence information. Information\
      \ for each sequence is broken up into a block of 2 lines. Line 1 contains information\
      \ about the sequence and begins with a greater than symbol, \u2018>\u2019. Line\
      \ 2 contains the actual amino acid or genomic sequence using single-letter codes.\n"
    term: FASTA
- slug: fastq
  fr:
    def: "A file format for storing genomic sequence information and the corresponding\
      \ quality scores. Information for each sequence is broken up into a block of\
      \ four lines. Line 1 contains information about the sequence and begins with\
      \ \u2018@\u2019. Line 2 contains the actual genomic sequence using single-letter\
      \ codes to represent nucleotides. Line 3 is a separator that begins with a `+`.\
      \ Line 4 has a string of quality characters for each base in the genomic sequence.\n"
    term: FASTQ
- slug: feature
  fr:
    def: 'An individual characteristic or property of a phenomenon that is measurable
      (e.g. length, height, number of petals) and used as the input to a model. Finding
      or selecting features that are highly independent and discriminatory is a fundamental
      part of classification.

      '
    term: Feature
- slug: feature_data
  fr:
    def: 'A variable or observable in a dataset.

      '
    term: feature (in data)
- slug: feature_software
  fr:
    def: 'Some aspect of software that was deliberately designed or built. A [bug](#bug)
      is an undesired feature.

      '
    term: feature (in software)
- slug: feature_branch
  fr:
    def: 'A [branch](#branch) within a [Git](#git) [repository](#repository) containing
      [commits](#commit) dedicated to a specific feature, e.g., a [bug](#bug) fix
      or a new function. This branch can be merged into another branch.

      '
    term: feature branch
- slug: feature_engineering
  fr:
    def: 'The process of choosing the variables to be used as inputs to a [model](#model).
      Choosing good features often depends on [domain knowledge](#domain_knowledge).

      '
    term: feature engineering
- slug: feature_request
  fr:
    def: 'A request to the maintainers or developers of a software program to add
      a specific functionality (a feature) to that program.

      '
    term: feature request
- slug: filename_extension
  fr:
    def: 'The last part of a filename, usually following the ''.'' symbol. Filename
      extensions are commonly used to indicate the type of content in the file, though
      there is no guarantee that this is correct.

      '
    term: filename extension
- slug: filename_stem
  fr:
    def: 'The part of the filename that does not include the [extension](#filename_extension).
      For example, the stem of `glossary.yml` is `glossary`.

      '
    term: filename stem
- slug: filesystem
  fr:
    def: 'The part of the [operating system](#operating_system) that manages how files
      are stored and retrieved. Also used to refer to all of those files and [directories](#directory)
      or the specific way they are stored (as in "the Unix filesystem").

      '
    term: filesystem
- slug: fine_tuning
  fr:
    def: "Fine-tuning is an approach to transfer learning in which a pre-trained network\
      \ is adapted to the  specifics of a new dataset. \n"
    term: fine-tuning (deep learning)
- slug: fixture
  fr:
    def: 'The thing on which a test is run, such as the [parameters](#parameter) to
      the function being tested or the file being processed.

      '
    term: fixture
- slug: folder
  fr:
    def: 'Another term for a [directory](#directory).

      '
    term: folder
- slug: for_loop
  fr:
    def: 'A construct in a program that repeats one or more other statements (the
      [loop body](#loop_body)) once for each item in a sequence, such as each number
      in a range or each element of a list.

      '
    term: for loop
- slug: fork
  fr:
    def: 'A copy of one person''s [Git](#git) [repository](#repository) that lives
      in another person''s GitHub account. Changes to the content of a fork can be
      submitted to the [upstream repository](#upstream_repository) via a [pull request](#pull_request).

      '
    term: fork
- slug: fragment_shader
  fr:
    def: 'The [shader](#shader) stage in the rendering pipeline designated towards
      calculating colours for each fragment on the screen. For each pixel covered
      by a primitive, a fragment is generated. All fragments for each pixel will have
      their colours combined based on depth and opacity after the fragment shader
      stage is complete.

      '
    term: fragment shader
- slug: faq
  fr:
    def: 'A curated list of questions commonly asked about a subject, along with answers.

      '
    term: Frequently Asked Questions
- slug: full_identifier_git
  fr:
    def: 'A unique 160-bit identifier for a [commit](#commit) in a [Git](#git) [repository](#repository),
      usually written as a 20-character [hexadecimal](#hexadecimal) character [string](#string).

      '
    term: full identifier (of a commit)
- slug: full_join
  fr:
    def: 'A [join](#join) that returns all rows and all columns from two tables A
      and B. Where the [keys](#key) of A and B match, values are combined; where they
      do not, missing values from either table are filled with [null](#null), [NA](#na),
      or some other [missing value](#missing_value) signifier.

      '
    term: full join
- slug: fully_qualified_name
  fr:
    def: 'An unambiguous name of the form `package::thing`, indicating the original
      source of the [object](#object) in question.

      '
    term: fully-qualified name
- slug: function
  fr:
    def: 'A code block which gathers a sequence of operations into a whole, preserving
      it for ongoing use by defining a set of tasks that takes zero or more required
      and optional arguments as inputs and returns expected outputs (return values),
      if any. Functions enable repeating these defined tasks with one command, known
      as a function call.

      '
    term: function
- slug: functional_programming
  fr:
    def: 'A style of programming in which data is transformed through successive application
      of functions, rather than by using control structures such as loops. In functional
      programming, there must be a direct relationship between the input to a function
      and the output produced by the function, meaning the result should not be affected
      by the current values of global variables or other parts of the [global program
      state](#global_environment). It also requires that functions do not produce
      [side effects](#side_effect), meaning they do not modify the global program
      state, or do anything other than computing the return value, such as writing
      output to a [log](#log) file, or printing to the [console](#console).

      '
    term: functional programming
- slug: garbage_in_garbage_out
  fr:
    def: 'The idea that messy data as an input will result in messy data as an output.

      '
    term: garbage in, garbage out
- slug: generator_function
  fr:
    def: 'A function whose state is automatically saved when it returns a value so
      that execution can be restarted from that point the next time it is called.
      One example of generator functions use is to produce streams of values that
      can be processed by [for loops](#for_loop).

      '
    term: generator function
- slug: geometric_mean
  fr:
    def: 'Calculated from a set of n numbers by first computing the product of those
      numbers, and then computing the n-th [root](#root_math) of the result. In contrast
      to the [arithmetic mean](#arithmetic_mean), which measures central tendancy
      in an "additive" way, the geometric mean measures central tendancy in a "multiplicative"
      way, and hence is often appropriate when estimating an average rates of change
      or some other multiplicative constant.

      '
    term: Geometric Mean
- slug: geometry_shader
  fr:
    def: 'The [shader](#shader) stage in the rendering pipeline designated towards
      processing primitives. Not to be confused with [tessellation shaders](#tessellation_shader),
      geometry shaders are focused on modifying the shape of primitives to create
      new results. For example, pixels may be converted into particles using a geometry
      shader.

      '
    term: geometry shader
- slug: ggplot2
  fr:
    def: 'A [package](#package) in [R](#r_language) that implements a layered grammar
      of graphics for generating plots. It is a popular alternative to plotting with
      [base R](#base_r) and part of the [tidyverse](#tidyverse).

      '
    term: ggplot2
- slug: git_conflict
  fr:
    def: 'A situation in which incompatible or overlapping changes have been made
      on different [branches](#branch) that are now being [merged](#git_merge).

      '
    term: Git conflict
- slug: git_fork
  fr:
    def: 'To make a new copy of a [Git](#git) [repository](#repository) on a [server](#server),
      or the copy that is made.

      '
    term: Git fork
- slug: git_merge
  fr:
    def: 'Merging branches in [Git](#git) incorporates development histories of two
      [branches](#branch) in one. If changes are made to similar parts of the branches
      on both branches, a [conflict](#git_conflict) will occur and

      '
    term: Git merge
- slug: git_remote
  fr:
    def: 'A short name for a [remote repository](#remote_repository) (like a bookmark).

      '
    term: Git remote
- slug: globbing
  fr:
    def: 'To specify a set of filenames using a simplified form of [regular expressions](#regular_expression),
      such as `*.dat` to mean "all files whose names end in `.dat`". The name is derived
      from "global".

      '
    term: globbing
- slug: gnu
  fr:
    def: '"GNU" is an [operating system](#operating_system) that is free software.
      GNU is a recursive acronym for "GNU is Not Unix!". The GNU operating system
      consists of GNU [packages](#package) as well as free software realeased by third
      parties.

      '
    term: GNU Operating System
- slug: gpl
  fr:
    def: 'A [license](#license) that allows people to re-use software as long as they
      distribute the source of their changes.

      '
    term: GNU Public License
- slug: gradient_boosting
  fr:
    def: 'A [machine learning](#machine_learning) technique that produces an ensemble
      of weak prediction models (typically [decision trees](#decision_tree)) in a
      stepwise fashion.

      '
    term: gradient boosting
- slug: gradient_descent
  fr:
    def: 'An optimization algorithm that repeatedly calculates the gradient at the
      current point takes a small step in the direction in which the gradient is decreasing,
      and then recalculates the gradient.

      '
    term: gradient descent
- slug: graph
  fr:
    def: '1. A plot or a chart that displays data, or 2. a data structure in which
      [nodes](#node) are connected to one another by [edges](#edge).

      '
    term: graph
- slug: gui
  fr:
    def: 'A user interface that relies on windows, menus, pointers, and other graphical
      elements, as opposed to a [command-line interface](#cli) or voice-driven interface.

      '
    term: graphical user interface
- slug: gpu
  fr:
    def: 'Specialized processor designed to run many instances of a single program
      in parallel. Orginally designed for use in graphics, but is also used for general
      computation in the form of [compute shaders](#compute_shader).

      '
    term: Graphics Processing Unit
- slug: group
  fr:
    def: 'To divide data into subsets according to a set of criteria while leaving
      records in a single structure.

      '
    term: group
- slug: handle_condition
  fr:
    def: 'To accept responsibility for handling an error or other unexpected event.
      [R](#r_language) prefers "handling a condition" to "[catching an exception](catch_exception)".
      [Python](#python), on the other hand, encourages raising and catching exceptions,
      and in some situations, requires it.

      '
    term: handle (condition)
- slug: hardware
  fr:
    def: 'Any physical component of a computer system. Hardware can be internal, such
      as CPU, memory, and graphics cards; or external, such as monitors and keyboards.
      Hardware operates in conjunction with software to produce a functioning computer
      system.

      '
    term: hardware
- slug: harmonic_mean
  fr:
    def: 'Calculated from a set of n numbers by first computing the sum of the [reciprocals](#reciprocal)
      of those numbers, and then dividing n by the resulting sum. Alternatively, it
      can be computed as the [reciprocal](#reciprocal) of the [arithmetic mean](#arithmetic_mean)
      of the [reciprocal](#reciprocal) values. Similarly to the [geometric mean](#geometric_mean),
      the harmonic mean is often used as an alternative measure of central tendancy
      to the usual [arithmetic mean](#arithmetic_mean) when estimating an average
      rates of change or some other multiplicative constant. For a set of positive
      numbers that are not all equal, the min < HM < GM < AM < max where min is the
      minimum value, max is the maximum value, and HM GM and AM are the harmonic,
      [geometric](#geometric_mean), and [arithmetic](#arithmetic_mean) means respectively.

      '
    term: Harmonic Mean
- slug: hash_function
  fr:
    def: 'A function that turns arbitrary data into a bit array, or a [key](#key),
      of a fixed size. Hash functions are used to determine where data should be stored
      in a [hash table](#hash_table).

      '
    term: hash function
- slug: hash_table
  fr:
    def: 'A data structure that calculates a pseudo-random key (location) for each
      value passed to it and stores the value in that location. Hash tables enable
      fast lookup for arbitrary data. This occurs at the cost of extra memory because
      hash tables must always be larger than the amount of information they need to
      store, to avoid the possibility of data collisions, when the hash function returns
      the same key for two different values.

      '
    term: hash table
- slug: header_row
  fr:
    def: 'If present, the first row of a data file that defines column names (but
      not their data types or units).

      '
    term: header row
- slug: heterogeneous
  fr:
    def: 'Containing mixed data types. For example, in [Python](#python) and [R](#r_language),
      a [list](#list) can contain a mix of numbers, character strings, and values
      of other types.

      '
    term: heterogeneous
- slug: hexadecimal
  fr:
    def: 'A base-16 number system. Hexadecimal values are usually written using the
      digits 0-9 and the characters A-F in either upper or lower case. Hexadecimal
      is often used to represent [binary](#binary) values, since two hexadecimal digits
      use exactly one byte of storage.

      '
    term: hexadecimal
- slug: hidden_layer
  fr:
    def: 'A hidden layer in a [neural network](#neural_network) refers to the layers
      of neurons that are not directly connected to input or output. The layers are
      "hidden" because you do not directly observe their input and output values.

      '
    term: hidden layer (deep learning)
- slug: high_performance_computing
  fr:
    def: 'When computing power is drawn from multiple powerful processors that work
      together in parallel, rather than from a single desktop computer, laptop, or
      work station. This significantly speeds up analysis and reduces computing time,
      which allows people to work with [big data](#big_data).

      '
    term: high performance computing
- slug: higher_order_function
  fr:
    def: 'A function that operates on other functions. For example, the higher-order
      function `map` executes a given function once on each value in a [list](#list).
      Higher-order functions are heavily used in [functional programming](#functional_programming).

      '
    term: higher-order function
- slug: hippocratic_license
  fr:
    def: 'An ethical software [license](#license) that allows free use for any purpose
      that does not contravene the Universal Declaration of Human Rights.

      '
    term: Hippocratic License
- slug: histogram
  fr:
    def: 'A graphical representation of the distribution of a set of numeric data,
      usually a vertical bar graph.

      '
    term: histogram
- slug: hitchhiker
  fr:
    def: 'Someone who is part of a project but does not actually do any work on it.

      '
    term: hitchhiker
- slug: home_directory
  fr:
    def: 'A directory that contains a user''s files. Each user on a multi-user computer
      will have their own home directory; a personal computer will often only have
      one home directory.

      '
    term: home directory
- slug: homogeneous
  fr:
    def: 'Containing a single data type. For example, a [vector](#vector) must be
      homogeneous: its values must all be numeric, logical, etc.

      '
    term: homogeneous
- slug: http_header
  fr:
    def: 'A key-value pair at the top of an [HTTP](#http) [request](#http_request)
      or [response](#http_response) that carries additional information such as the
      user''s preferred language or the length of the data being transferred.

      '
    term: HTTP header
- slug: http_request
  fr:
    def: 'A message sent from a [client](#client) to a [server](#server) using the
      [HTTP](#http) [protocol](#protocol) asking for data. A request usually asks
      for a web page, image, or other data.

      '
    term: HTTP request
- slug: http_response
  fr:
    def: 'A reply sent from a [server](#server) to a [client](#client) using the [HTTP](#http)
      [protocol](#protocol) in response to a [request](#http_request). The response
      usually contains a web page, image, or data.

      '
    term: HTTP response
- slug: html
  fr:
    def: 'The standard [markup language](#markup_language) used for web pages. HTML
      is represented in memory using [DOM](#dom) (Document Object Model).

      '
    term: HyperText Markup Language
- slug: http
  fr:
    def: 'The standard [protocol](#protocol) for data transfer on the World-Wide Web.
      HTTP defines the format of [requests](#http_request) and [responses](#http_response),
      the meanings of standard error codes, and other features.

      '
    term: HyperText Transfer Protocol
- slug: icon
  fr:
    def: 'In computing, an icon is a graphic symbol that is displayed on a computer
      screen to help a user navigate the computer system.

      '
    term: icon
- slug: immutable_type
  fr:
    def: 'Immutable is when no change is possible over time. An object of this type
      can not be changed and its state can not be modified after it is created.

      '
    term: immutable type
- slug: import
  fr:
    def: 'To bring things from a [module](#module) into a program for use. In most
      languages a program can only import things that the module explicitly [exports](#export).

      '
    term: import
- slug: impostor_syndrome
  fr:
    def: 'The [false](#false) belief that one''s successes are a result of accident
      or luck rather than ability.

      '
    term: impostor syndrome
- slug: in_place_operator
  fr:
    def: 'An operator that updates one of its operands. For example, the expression
      `x += 2` uses the in-place operator `+=` to add 2 to the current value of `x`
      and assign the result back to `x`.

      '
    term: in-place operator
- slug: increment
  fr:
    def: 'A unary operation that increases the value of a variable, usually by 1.

      '
    term: increment
- slug: independent_variable
  fr:
    def: 'The factor that you purposely change or control in order to see what effect
      it has on the [dependent variable](#dependent_variable).

      '
    term: independent variable
- slug: index
  fr:
    def: 'Each of the elements of an array. Indexes represent the position by numerical
      representation.

      '
    term: index
- slug: infinite_loop
  fr:
    def: 'A loop where the exit condition is never met, so the loop continues to repeat
      itself. Often a programming error.

      '
    term: infinite loop
- slug: inner_join
  fr:
    def: 'A [join](#join) that returns the combination of rows from two tables, A
      and B, whose [keys](#key) exist in both tables.

      '
    term: inner join
- slug: instance
  fr:
    def: 'An [object](#object) of a particular [class](#class).

      '
    term: instance
- slug: ide
  fr:
    def: 'An application that helps programmers develop software. IDEs typically have
      a built-in editor, a [console](#console) to execute code immediately, and browsers
      for exploring data structures in memory and files on disk.

      '
    term: Integrated Development Environment
- slug: integration_test
  fr:
    def: 'A test that checks whether the parts of a system work properly when put
      together.

      '
    term: integration test
- slug: interface
  fr:
    def: 'A ubiquitously used phrase in computing that describes a point of contact.
      This could be a user interface (e.g. [graphical user interface](#gui) or [command
      line](#cli)), the interface of an [object](#object) with the rest of the [code](#source_code)
      or how a program can interact with web services through an [API](#api).

      '
    term: interface
- slug: imap
  fr:
    def: 'A standard internet protocol used by email clients to retrieve messages
      from an email server. Messages are left on the server so that they can be accessed
      from multiple email clients.

      '
    term: Internet Message Access Protocol
- slug: interpreted_language
  fr:
    def: 'A high-level language that is not executed directly by the computer, but
      instead is run by an [interpreter](#interpreter) that translates program instructions
      into machine commands on the fly.

      '
    term: interpreted language
- slug: interpreter
  fr:
    def: 'A program whose job it is to run programs written in a high-level [interpreted
      language](#interpreted_language). Interpreters can run interactively, but may
      also execute commands saved in a file.

      '
    term: interpreter
- slug: invariant
  fr:
    def: 'Something that must be [true](#true) at all times inside of a program or
      during the [lifecycle](#lifecycle) of an [object](#object). Invariants are often
      expressed using [assertions](#assertion). If an invariant expression is not
      true, this is indicative of a problem, and may result in failure or early termination
      of the program.

      '
    term: invariant
- slug: ipython
  fr:
    def: 'Short for "Interactive [Python](#python)", it is a [console](#console) designed
      to assist interactive and exploratory programming with features such as coloured
      text, [tab-completion](#tab_completion), [filesystem](#filesystem) navigation,
      quick access to [documentation](#docstring) and [shell commands](#shell).

      '
    term: IPython
- slug: iso_date_format
  fr:
    def: 'An international for formatting dates. While the full standard is complex,
      the most common form is `YYYY-MM-DD`, i.e., a four-digit year, a two-digit month,
      and a two-digit day, separated by hyphens.

      '
    term: ISO date format
- slug: issue
  fr:
    def: 'A [bug report](#bug_report), feature request, or other to-do item associated
      with a project. Also called a [ticket](#ticket).

      '
    term: issue
- slug: issue_tracking_system
  fr:
    def: 'Similar to a [bug tracking system](#bug_tracker) in that it tracks [issues](#issue)
      made to a [repository](#repository), usually in the form of [feature requests](#feature_request),
      [bug reports](#bug_report), or some other to-do item.

      '
    term: issue tracking system
- slug: iterator_pattern
  fr:
    def: 'A [design pattern](#design_pattern) in which a temporary [object](#object)
      or [generator function](#generator_function) produces each value from a collection
      in turn for processing. This pattern hides the differences between different
      kinds of data structures so that everything can be processed using loops.

      '
    term: Iterator pattern
- slug: java
  fr:
    def: 'Java is a high-level, cross-platform, object-oriented and general-purpose
      programming language. Programs written in Java will run on any platform that
      supports the Java software platform without having to be recompiled. This feature
      gave rise to the slogan "Write Once Run Anywhere". Java syntax is similar to
      that of C and C++.

      '
    term: Java
- slug: join
  fr:
    def: 'One of several operations that combine values from two [tables](#table).

      '
    term: join
- slug: jupyter
  fr:
    def: 'Project Jupyter is a non-profit, open-source project that was born out of
      the IPython Project in 2014 as [IPython](#ipython) evolved to support interactive
      [data science](#data_science) and scientific computing in many different programming
      languages.

      '
    term: Jupyter
- slug: jupyter_notebook
  fr:
    def: 'An open-source, web-based [computational notebook](#computational_notebook)
      that allows the user to write and share live code, equations, visualisations,
      and narrative text.

      '
    term: Jupyter Notebook
- slug: jupyterlab
  fr:
    def: 'A next-generation interface to [Jupyter Notebooks](#jupyter_notebook). JupyterLab
      is open-source, web-based and has a multiple-document interface which supports
      working with multiple notebooks and [Markdown](#markdown) files in a single
      browser tab. JupyterLab also supports opening terminal/[console](#console) windows
      in the browser.

      '
    term: JupyterLab
- slug: k_means_clustering
  fr:
    def: 'An [unsupervised_learning](#unsupervised_learning) algorithm that forms
      *k* groups by repeatedly calculating the [centroid](#centroid) of the current
      groups and then reallocating data points to the nearest centroid until the centroids
      no longer move.

      '
    term: k-means clustering
- slug: k_nearest_neighbors
  fr:
    def: 'A [classification](#classification) algorithm that classifies data points
      based on their similarity to their *k* nearest neighbours.

      '
    term: k-nearest neighbors
- slug: kebab_case
  fr:
    def: 'A naming convention in which the parts of a name are separated with dashes,
      as in `first-second-third`.

      '
    term: kebab case
- slug: key
  fr:
    def: '1. A [field](#field) or combination of fields whose value(s) uniquely identify
      a [record](#record) within a [table](#table) or dataset. Keys are often used
      to select specific records and in [joins](#join).

      2. Part of a key/value pair, used as a unique identifier in a data structure
      such as a [dictionary](#dictionary).

      '
    term: key
- slug: keyword_argument
  fr:
    def: 'Extra (often optional) arguments given to a function as key/value pairs.

      '
    term: keyword arguments
- slug: issue_label
  fr:
    def: 'A short textual tag associated with an [issue](#issue) to categorize it.
      Common labels include [`bug`](#bug) and `feature request`.

      '
    term: label (an issue)
- slug: latent_variable
  fr:
    def: 'A variable that is not observed directly but instead is inferred from the
      states or values of other variables.

      '
    term: latent variable
- slug: lazy_evaluation
  fr:
    def: 'Delaying evaluation of an expression until the value is actually needed
      or, in the case of a conditional expression, only evaluating as much of the
      expression as is necessary. For instance, the second half of `A and B` will
      only be evaluated if A is [truthy](#truthy).

      '
    term: lazy evaluation
- slug: learning_rate
  fr:
    def: 'In [artificial neural networks](#neural_network), the learning rate is a
      hyper-parameter that determines the pace at which the network adjusts the weights
      to move down the loss gradient. A large learning rate can speed up training,
      but the network might overshoot and miss the minimum. A small learning rate
      will overshoot less, but will be slower. It can also get more easily stuck in
      local minima.

      '
    term: learning rate (deep learning)
- slug: left_join
  fr:
    def: 'A [join](#join) that combines data from two tables, A and B, where [keys](#key)
      in table A match keys in table B, [fields](#field) are concatenated. Where a
      key in table A does *not* match a key in table B, columns from table B are filled
      with [null](#null), [NA](#na), or some other [missing value](#missing_value).
      Keys from table B that do not match keys from table A are excluded for the result.

      '
    term: left join
- slug: lexical_scoping
  fr:
    def: 'To look up the value associated with a name according to the textual structure
      of a program. Most programming languages use lexical scoping instead of [dynamic
      scoping](#dynamic_scoping) because the latter is less predictable.

      '
    term: lexical scoping
- slug: license
  fr:
    def: 'A legal document describing how something can be used, and by whom.

      '
    term: license
- slug: lifecycle
  fr:
    def: 'The steps that something is allowed or required to go through. The lifecycle
      of an [object](#object) runs from its [construction](#constructor) through the
      operations it can or must perform before it is destroyed; the lifecycle of an
      [issue](#issue) may be: "created", "assigned", "in progress", "ready for review",
      and "completed".

      '
    term: lifecycle
- slug: lift
  fr:
    def: 'How well a model predicts or [classifies](#classification) things, measured
      as the ratio of the response in the segment identified to the response in the
      population as a whole. A lift of 1 means the model does no better than chance;
      higher lift means the model is doing better.

      '
    term: lift
- slug: line_comment
  fr:
    def: 'A [comment](#comment) in a program that spans part of a single line, as
      opposed to a [block comment](#block_comment) that may span multiple lines.

      '
    term: line comment
- slug: linear_regression
  fr:
    def: 'A method for finding the best straight-line fit between two datasets, typically
      by minimizing the squares of the distances between the points and a regression
      line.

      '
    term: linear regression
- slug: linter
  fr:
    def: 'A program that checks for common problems in software, such as violations
      of indentation rules or variable naming conventions. The name comes from the
      first tool of its kind, called `lint`.

      '
    term: linter
- slug: lisp
  fr:
    def: 'A family of programming languages that represent programs and data as nested
      lists. Many other programming languages have borrowed ideas from Lisp.

      '
    term: Lisp
- slug: list
  fr:
    def: 'A [vector](#vector) that can contain values of many different ([heterogeneous](#heterogeneous))
      types.

      '
    term: list
- slug: list_comprehension
  fr:
    def: 'In [Python](#python), an expression that creates a new list in place. For
      example, `[2*x for x in values]` creates a new list whose items are the doubles
      of those in `values`.

      '
    term: list comprehension
- slug: log
  fr:
    def: 'A record of a program''s execution containing [messages](#log_message) written
      via a [logging framework](#logging_framework) for later inspection.

      '
    term: log
- slug: log_message
  fr:
    def: 'A single entry in a [log](#log) of a program''s execution. Log messages
      are usually highly structured so that data (such as the time or the severity)
      can be recovered later.

      '
    term: log message
- slug: logging_framework
  fr:
    def: 'A software [library](#library) that manages internal reporting for programs.

      '
    term: logging framework
- slug: logging_level
  fr:
    def: 'A setting that controls how much information is generated by a [logging
      framework](#logging_framework). Typical logging levels include `DEBUG`, `WARNING`,
      and `ERROR`.

      '
    term: logging level
- slug: logical_indexing
  fr:
    def: 'To index a [vector](#vector) or other structure with a vector of [Booleans](#boolean),
      keeping only the values that correspond to [true](#true) values. Also referred
      to as [masking](#masking).

      '
    term: logical indexing
- slug: logistic_regression
  fr:
    def: 'A method for fitting a model to some data that uses logistic (S-shaped)
      curves instead of straight lines.

      '
    term: logistic regression
- slug: long_identifier_git
  fr:
    def: 'See [full identifier](#full_identifier_git).

      '
    term: long identifier (of commit)
- slug: long_option
  fr:
    def: 'A full-word identifier for a [command-line argument](#command_line_argument).
      While most common flags are a single letter preceded by a dash, such as `-v`,
      long options typically use two dashes and a readable name, such as `--verbose`.

      '
    term: long option
- slug: loop
  fr:
    def: 'A structure that repeatedly executes a section of code until a specific
      exit condition is met.

      '
    term: loop
- slug: loop_body
  fr:
    def: 'The statement or statements executed by a loop.

      '
    term: loop body
- slug: lsof
  fr:
    def: 'UNIX command to see the list of open files being used by [processes](#process).

      '
    term: lsof
- slug: machine_learning
  fr:
    def: 'The study or use of algorithms whose performance improves as they are given
      more data. Machine learning algorithms often use [training data](#training_data)
      to build a [model](#model). Their performance is then measured by how well they
      predict the properties of [test data](#test_data).

      '
    term: machine learning
- slug: magic_number
  fr:
    def: 'An unnamed numerical constant that appears in a program without explanation.

      '
    term: magic number
- slug: make
  fr:
    def: 'The original [build manager](#build_manager) for Unix, still in daily use
      after more than forty years.

      '
    term: Make
- slug: makefile
  fr:
    def: 'A file containing commands for [Make](#make), often actually called `Makefile`.

      '
    term: Makefile
- slug: markov_chain
  fr:
    def: 'Any [model](#model) describing a series of events in which the probability
      of each event depends only on the current state, not on the path taken to reach
      that state.

      '
    term: Markov Chain
- slug: marthas_rules
  fr:
    def: 'A simple set of rules for making decisions in small groups.

      '
    term: Martha's Rules
- slug: masking
  fr:
    def: '[TODO] to be defined

      '
    term: Masking
- slug: master_branch
  fr:
    def: 'A dedicated, permanent, central [branch](#branch) which should contain a
      "ready product". After a new feature is developed on a separate branch to avoid
      breaking the main code, it can be [merged](#git_merge) into the master branch.

      '
    term: master branch
- slug: maximum_likelihood_estimation
  fr:
    def: 'To choose the [parameters](#parameter) for a [probability distribution](#probability_distribution)
      in order to maximize the likelihood of obtaining observed data.

      '
    term: maximum likelihood estimation
- slug: mean
  fr:
    def: 'The average value of a dataset, more properly known as the [arithmetic mean](#arithmetic_mean)
      to distinguish it from the [geometric](#geometric_mean) and [harmonic](#harmonic_mean)
      means.

      '
    term: mean
- slug: mean_absolute_error
  fr:
    def: 'The average error of all predicted values compared with actual values.

      '
    term: mean absolute error
- slug: mean_squared_error
  fr:
    def: 'The average of the squares of all the errors of all predicted values compared
      with actual values. Squaring makes larger errors count for more, and transforms
      negative errors into positive values, making this a more popular measure than
      [mean absolute error](#mean_absolute_error).

      '
    term: mean squared error
- slug: median
  fr:
    def: 'A value separating the upper and lower halves of a sorted dataset. The median
      often gives a better idea of what is typical of the dataset than the [mean](#mean),
      which can be influenced by a small number of extreme [outliers](#outlier). If
      the dataset contains an even number of elements, this is the average of the
      two central elements.

      '
    term: median
- slug: merge_git
  fr:
    def: 'See [Git merge](#git_merge)

      '
    term: merge (Git)
- slug: method
  fr:
    def: 'An implementation of a [generic function](#generic_function) that handles
      objects of a specific class.

      '
    term: method
- slug: milestone
  fr:
    def: 'A target that a project is trying to meet, often represented as a set of
      [issues](#issue) that all have to be resolved by a certain time.

      '
    term: milestone
- slug: mime_type
  fr:
    def: 'A standard way to identify the contents of files on the internet. The term
      is an acronym of "multi-purpose Internet mail extension", and MIME types are
      often identified by [filename extensions](#filename_extension), such as `.png`
      for PNG-formatted images.

      '
    term: MIME type
- slug: minimum_spanning_tree
  fr:
    def: 'A minimum spanning tree is a data structure that describes the unique set
      of [edges](#edge) that connect all of the [nodes](#node) in a [graph](#graph)
      while minimizing the weights of all included [edges](#edge). The minimum spanning
      tree may refer to either the algorithm to calculate the structure or the resulting
      structure itself.

      '
    term: minimum spanning tree
- slug: missing_value
  fr:
    def: 'A special value such as [null](#null) or [NA](#na) used to indicate the
      absence of data. Missing values can signal that data was not collected or that
      the data did not exist in the first place (e.g., the middle name of someone
      who does not have one).

      '
    term: missing value
- slug: mit_license
  fr:
    def: 'A [license](#license) that allows people to re-use software with no restrictions.

      '
    term: MIT License
- slug: mock_object
  fr:
    def: 'A simplified replacement for part of a program whose behavior is easy to
      control and predict. Mock objects are used in [unit tests](#unit_test) to simulate
      databases, web services, and other complex systems.

      '
    term: mock object
- slug: mode
  fr:
    def: 'The value, or values, that occurs most frequently in a dataset.

      '
    term: mode
- slug: model
  fr:
    def: 'A specification of the mathematical relationship between different variables.

      '
    term: model
- slug: monte_carlo
  fr:
    def: 'Any method or algorithm that relies on artificially-injected randomness.

      '
    term: Monte Carlo method
- slug: moving_average
  fr:
    def: 'The [mean](#mean) of each set of several consecutive values from [time series](#time_series)
      data.

      '
    term: moving average
- slug: multi_threaded
  fr:
    def: 'Capable of performing several operations simultaneously. Multi-threaded
      programs are usually more efficient than [single-threaded](#single_threaded)
      ones, but also harder to understand and [debug](#debug).

      '
    term: multi-threaded
- slug: mutable_type
  fr:
    def: 'An object of this type may be changed and its state can be modified after
      it is created.

      '
    term: mutable type
- slug: mutation
  fr:
    def: 'Changing data in place, such as modifying an element of an array or adding
      a record to a database.

      '
    term: mutation
- slug: n_gram
  fr:
    def: 'A sequence of $N$ items, typically words in natural language. For example,
      a trigram is a sequence of three words. N-grams are often used as input in [computational
      linguistics](#computational_linguistics).

      '
    term: n-gram
- slug: root_math
  fr:
    def: 'The n-th root of a positive number x is the number that when multiplied
      by itself n times produces x. This can commonly be calculated by raising x to
      the power of the [reciprocal](#reciprocal) of n.

      '
    term: n-th root
- slug: naive_bayes_classifier
  fr:
    def: 'Any [classification](#classification) algorithm based on [Bayes'' Theorem](#bayes_theorem)
      that assumes every [feature](#feature_data) being classified is independent
      of every other feature.

      '
    term: naive Bayes classifier
- slug: name_collision
  fr:
    def: 'The ambiguity that arises when two or more things in a program that have
      the same name are active at the same time. Most languages use [namespaces](#namespace)
      to prevent such collisions.

      '
    term: name collision
- slug: named_argument
  fr:
    def: 'A function [parameter](#parameter) that is given a value by explicitly naming
      it in a function call.

      '
    term: named argument
- slug: namespace
  fr:
    def: 'A collection of names in a program that exists in isolation from other namespaces.
      Each function, [object](#object), [class](#class), or [module](#module) in a
      program typically has its own namespace so that references to "X" in one part
      of a program do not accidentally refer to something called "X" in another part
      of the program. Scope is a distinct, but related, concept.

      '
    term: namespace
- slug: nano_editor
  fr:
    def: 'A very simple text editor found on most Unix systems.

      '
    term: Nano (editor)
- slug: nlp
  fr:
    def: 'See [computational linguistics](#computational_linguistics).

      '
    term: natural language processing
- slug: negative_selection
  fr:
    def: 'To specify the [elements](#element) of a [vector](#vector) or other data
      structure that are not desired by negating their indices.

      '
    term: negative selection
- slug: neural_network
  fr:
    def: 'One of a large family of algorithms for identifying patterns in data by
      mimicking the way neurons interact. A neural network consists of one or more
      layers of [nodes](#node), each of which is connected to nodes in the preceding
      and subsequent layer. If enough of a node''s inputs are active, that node activates
      as well.

      '
    term: neural network
- slug: node
  fr:
    def: 'An element of a [graph](#graph) that is connected to other nodes by [edges](#edge).
      Nodes typically have data associated with them, such as names or weights.

      '
    term: node
- slug: non_blocking_execution
  fr:
    def: 'To allow a program to continue running while an operation is in progress.
      For example, many systems support non-blocking execution for file I/O so that
      the program can continue doing work while it waits for data to be read from
      or written to the [filesystem](#filesystem) (which is typically much slower
      than the CPU).

      '
    term: non-blocking execution
- slug: nonparametric_statistics
  fr:
    def: 'A branch of statistical tests which do not assume a known distribution of
      the population which the samples were taken from (Kruskal-Wallis and Dunn test
      are examples of non-parametric tests).

      '
    term: non-parametric (statistics)
- slug: normal_distribution
  fr:
    def: 'A continuous random distribution with a symmetric bell-curve shape. As datasets
      get larger, some of their most important statistical properties can be modeled
      using a normal distribution.

      '
    term: normal distribution
- slug: null_hypothesis
  fr:
    def: 'The claim that any patterns seen in data are entirely due to chance. Other
      claims (e.g., "X causes Y") must be much more likely than the null hypothesis
      in order to be substantiated.

      '
    term: null hypothesis
- slug: nullary_expression
  fr:
    def: 'An "expression" with no arguments, such as the value 3.

      '
    term: nullary expression
- slug: numpy
  fr:
    def: 'An open source Python package that works with arrays, vectors and matrices
      of dimension N, in a comparable method and with a syntax similar at Matlab software.
      You can find functions and sophisticated operations, focused in multidimensional
      arrays, linear algebra, Fourrier transform and generation of random values.

      '
    term: numpy
- slug: object
  fr:
    def: 'In [object-oriented programming](#oop), a structure that contains the data
      for a specific instance of a [class](#class). The operations the object is capable
      of are defined by the class''s [methods](#method).

      '
    term: object
- slug: oop
  fr:
    def: 'A style of programming in which functions and data are bound together in
      [objects](#object) that only interact with each other through well-defined interfaces.

      '
    term: object-oriented programming
- slug: objective_function
  fr:
    def: 'A function of one or more variables used to measure or compare the goodness
      of different solutions in an optimization problem.

      '
    term: objective function
- slug: off_by_one_error
  fr:
    def: 'A common error in programming in which the program refers to element `i`
      of a structure when it should refer to element `i-1` or `i+1`, or processes
      `N` elements when it should process `N-1` or `N+1`.

      '
    term: off-by-one error
- slug: open_license
  fr:
    def: 'A [license](#license) that permits general re-use, such as the [MIT License](#mit_license)
      or [GPL](#gpl) for software and [CC-BY](#cc_by) or [CC-0](#cc_0) for data, prose,
      or other creative outputs.

      '
    term: open license
- slug: open_science
  fr:
    def: 'A generic term for making scientific software, data, and publications generally
      available.

      '
    term: open science
- slug: openrefine
  fr:
    def: 'A standalone, open source desktop application for data cleanup and transformations,
      also know as data wrangling.

      '
    term: OpenRefine
- slug: operating_system
  fr:
    def: 'A program that provides a standard interface to whatever hardware it is
      running on. Theoretically, any program that only interacts with the operating
      system should run on any computer that operating system runs on.

      '
    term: operating system
- slug: optional_parameter
  fr:
    def: 'A [parameter](#parameter) that does not have to be given a value when a
      function is called. Most programming languages require programmers to define
      [default values](#default_value) for optional parameters, or assign them a special
      value automatically. Arguments passed to optional parameters will often be specified
      using [keyword arguments](#keyword_argument).

      '
    term: optional_parameter
- slug: orcid
  fr:
    def: 'An Open Researcher and Contributor ID that uniquely and persistently identifies
      an author of scholarly works. ORCIDs are for people what [DOIs](#doi) are for
      documents.

      '
    term: ORCID
- slug: orthogonality
  fr:
    def: 'The ability to use various features of software in any order or combination.
      Orthogonal systems tend to be easier to understand, since features can be combined
      without worrying about unexpected interactions.

      '
    term: orthogonality
- slug: outlier
  fr:
    def: 'Extreme values that might be measurement or recording errors, or might actually
      be rare events. Outliers are sometimes ignored when doing statistics, or handled
      or visualized separately.

      '
    term: outlier
- slug: overfitting
  fr:
    def: 'Fitting a [model](#model) so closely to one dataset that it does not generalize
      to others.

      '
    term: overfitting
- slug: p_value
  fr:
    def: 'The probability of obtaining a result at least as strong as the one observed
      if the [null_hypothesis](#null_hypothesis) is [true](#true) (i.e., if variation
      is purely due to chance). The lower the p-value, the more likely it is that
      something other than chance is having an effect.

      '
    term: p value
- slug: package_manager
  fr:
    def: 'A program that does its best to keep track of the different software installed
      on a computer and their dependencies on one another.

      '
    term: package manager
- slug: pager
  fr:
    def: 'A program that displays a few lines of text at a time.

      '
    term: pager
- slug: pandas
  fr:
    def: 'An open source Python package that offers fast, flexible, and expressive
      data structures to make working with structured data, and time series easy and
      intuitive. It is a powerful tool for data analysis and data manipulation.

      '
    term: pandas
- slug: parametric_statistics
  fr:
    def: "A branch of statistical tests which assume a known distribution of the population\
      \ which the samples were taken from (ANOVA and Student\u2019s t-tests are examples\
      \ of parametric tests).\n"
    term: parametric (statistics)
- slug: parent_tree
  fr:
    def: 'A [node](#node) in a [tree](#node) that is above another node (call a [child](#child_tree)).
      Every node in a tree except the [root node](#root_tree) has a single parent.

      '
    term: parent (in a tree)
- slug: parent_class
  fr:
    def: 'In [object-oriented programming](#oop), the [class](#class) from which a
      sub class (called the [child class](#child_class)) is derived.

      '
    term: parent class
- slug: parent_directory
  fr:
    def: 'The [directory](#directory) that contains another directory of interest.
      Going from a directory to its parent, then its parent, and so on eventually
      leads to the [root directory](#root_directory) of the [filesystem](#filesystem).

      '
    term: parent directory
- slug: parse
  fr:
    def: 'To translate the text of a program or web page into a data structure in
      memory that the program can then manipulate.

      '
    term: parse
- slug: pass_test
  fr:
    def: 'A test passes if the [actual result](#actual_result) matches the [expected
      result](#expected_result).

      '
    term: pass (a test)
- slug: patch
  fr:
    def: 'A single file containing a set of changes to a set of files, separated by
      markers that indicate where each individual change should be applied.

      '
    term: patch
- slug: path
  fr:
    def: 'A [string](#string) that specifies a location in a [filesystem](#filesystem).
      In Unix, the [directories](#directory) in a path are joined using `/`.

      '
    term: path (in filesystem)
- slug: pattern_rule
  fr:
    def: 'A generic [build rule](#build_rule) that describes how to update any file
      whose name matches a pattern. Pattern rules often use [automatic variables](#automatic_variable)
      to represent the actual filenames.

      '
    term: pattern rule
- slug: peanuts
  fr:
    def: 'An American comic strip by Charles M. Schulz which has inspired the names
      of [R](#r_language) versions.

      '
    term: Peanuts
- slug: perceptron
  fr:
    def: 'The simplest kind of [neural network])(#neural_network), which approximates
      a single neuron with _N_ binary inputs by computing a weighted sum of its inputs
      and firing if that value is zero or greater.

      '
    term: perceptron
- slug: permalink
  fr:
    def: 'Short for "permanent link", a URL that is intended to last forever.

      '
    term: permalink
- slug: phony_target
  fr:
    def: 'A [build target](#build_target) that does not correspond to an actual file.
      Phony targets are often used to store commonly used commands in a [Makefile](#makefile).

      '
    term: phony target
- slug: pip
  fr:
    def: 'The standard [package manager](#package_manager) for [Python](#python).
      pip enables the download and installation of Python packages not included in
      the standard library.

      '
    term: Pip Install Packages
- slug: pipe_shell
  fr:
    def: 'The `|` used to make the output of one command the input of the next.

      '
    term: pipe (in the Unix shell)
- slug: pipe_operator
  fr:
    def: 'The `%>%` used to make the output of one function the input of the next.

      '
    term: pipe operator
- slug: pivot_table
  fr:
    def: 'A technique for summarizing tabular data in which each cell represents the
      sum, average, or other function of the subset of the original data identified
      by the cell''s row and column heading.

      '
    term: pivot table
- slug: pointcloud
  fr:
    def: 'A set of discrete data points in three-dimensional space.

      '
    term: pointcloud
- slug: poisson_distribution
  fr:
    def: 'A [discrete random distribution](#discrete_random_variable) that expresses
      the probability of $N$ events occurring in a fixed time interval if the events
      occur at a constant rate, independent of the time since the last event.

      '
    term: Poisson distribution
- slug: positional_argument
  fr:
    def: 'An argument to a function that gets its value according to its place in
      the function''s definition, as opposed to a named argument that is explicitly
      matched by name.

      '
    term: positional argument
- slug: pop
  fr:
    def: 'A standard internet protocol used by email clients to retrieve messages
      from an email server. Messages are generally downloaded and deleted from the
      server, making it difficult to access messages from multiple email clients.
      POP3 (version 3) is the version of POP in common use.

      '
    term: Post Office Protocol
- slug: posterior_distribution
  fr:
    def: 'Probability distribution summarizing the [prior distribution](#prior_distribution)
      and the likelihood function.

      '
    term: posterior distribution
- slug: pothole_case
  fr:
    def: 'A naming style that separates the parts of a name with underscores, as in
      `first_second_third`.

      '
    term: pothole case
- slug: preamble
  fr:
    def: 'A series of commands, either placed in the main document, or kept in a separate
      document, that are included prior to the \begin{document} command. The preamble
      defines the type of the document, along with other formatting attributes and
      parameters. This is also the section of the document where packages are added
      using the command \usepackage{} to enable additional functionalities, and where
      custom commands can be defined.

      '
    term: preamble
- slug: prerequisite
  fr:
    def: 'Something that a [build target](#build_target) depends on.

      '
    term: prerequisite
- slug: principal_component_analysis
  fr:
    def: 'An algorithm that find the axis along which data varies most, then the axis
      that accounts for the largest part of the remaining variation, and so on.

      '
    term: principal component analysis
- slug: prior_distribution
  fr:
    def: 'The [probability distribution](#probability_distribution) that is assumed
      as a starting point when using [Bayes'' Theorem](#bayes_theorem) and used to
      construct a more accurate [posterior_distribution](#posterior_distribution).

      '
    term: prior distribution
- slug: probability_distribution
  fr:
    def: 'A mathematical description of all possible outcomes of a random event, and
      the probability of each occurring.

      '
    term: probability distribution
- slug: procedural_generation
  fr:
    def: 'A method of generating data algorithmically rather than manually. Typically
      this is done to reduce file sizes, increase the overall amount of content, and/or
      incorporate randomness at the expense of processing power.

      '
    term: procedural generation
- slug: procedural_programming
  fr:
    def: 'A style of programming in which functions operate on data that is passed
      into them. The term is used in contrast to other programming styles, such as
      [object-oriented programming](#oop) and [functional programming](#functional_programming).

      '
    term: procedural programming
- slug: process
  fr:
    def: 'An [operating system](#operating_system)''s representation of a running
      program. A process typically has some memory, the identity of the user who is
      running it, and a set of connections to open files.

      '
    term: process
- slug: product_manager
  fr:
    def: 'The person responsible for defining what features a product should have.

      '
    term: product manager
- slug: production_code
  fr:
    def: 'Software that is delivered to an end user. The term is used to distinguish
      such code from test code, deployment infrastructure, and everything else that
      programmers write along the way.

      '
    term: production code
- slug: project_manager
  fr:
    def: 'The person responsible for ensuring that a project moves forward.

      '
    term: project manager
- slug: prompt
  fr:
    def: 'The text printed by an [REPL](#repl) or [shell](#shell) that indicates it
      is ready to accept another command. The default prompt in the Unix shell is
      usually `$`, while in [Python](#python) it is `>>>`, and in [R](#r_language)
      it is `>`.

      '
    term: prompt
- slug: protocol
  fr:
    def: 'Any standard specifying how two pieces of software interact. A network protocol
      such as [HTTP](#http) defines the messages that [clients](#client) and [servers](#server)
      exchange on the World-Wide Web; [object-oriented](#oop) programs often define
      protocols for interactions between [objects](#object) of different [classes](#class).

      '
    term: protocol
- slug: provenance
  fr:
    def: 'A record of where data originally came from and what was done to process
      it.

      '
    term: provenance
- slug: pseudo_random_number
  fr:
    def: 'A value generated in a repeatable way that resembles the [true](#true) randomness
      of the universe well enough to fool observers.

      '
    term: pseudo-random number
- slug: prng
  fr:
    def: 'A function that can generate [pseudo-random numbers](#pseudo_random_number).

      '
    term: pseudo-random number generator
- slug: pull_indexing
  fr:
    def: 'Vectorized indexing in which the value at location `i` in the index [vector](#vector)
      specifies which [element](#element) of the source vector is being pulled into
      that location in the result vector, i.e., `result[i] = source[index[i]]`.

      '
    term: pull indexing
- slug: pull_request
  fr:
    def: 'The request to merge a new feature or correction created on a user''s [fork](#fork)
      of a [Git](#git) [repository](#repository) into the [upstream repository](#upstream_repository).
      The developer will be notified of the change, review it, make or suggest changes,
      and potentially [merge](#git_merge) it.

      '
    term: pull request
- slug: push_indexing
  fr:
    def: 'Vectorized indexing in which the value at location `i` in the index [vector](#vector)
      specifies an [element](#element) of the result vector that gets the corresponding
      element of the source vector, i.e., `result[index[i]] = source[i]`. Push indexing
      can easily produce gaps and collisions.

      '
    term: push indexing
- slug: pypi
  fr:
    def: 'The official third-party software repository for [Python](#python). Anyone
      can upload a [package](#package) to PyPI. PyPI packages may install via executed
      scripts or pre-compiled, system-specific wheels.

      '
    term: Python Package Index
- slug: psf
  fr:
    def: 'A non-profit organization that oversees and promotes the development and
      use of [Python](#python).

      '
    term: Python Software Foundation
- slug: quantile
  fr:
    def: 'If a set of sorted values are divided into groups of each size, each group
      is called a quantile. For example, if there are five groups, each is called
      a *quintile*; the bottom quintile contains the lowest 20% of the values, while
      the top quintile contains the highest 20%.

      '
    term: quantile
- slug: query_string
  fr:
    def: 'The portion of a [URL](#url) after the question mark `?` that specifies
      extra parameters for the [HTTP request](#http_request) as name-value pairs.

      '
    term: query string
- slug: quosure
  fr:
    def: 'A data structure containing an unevaluated expression and its environment.

      '
    term: quosure
- slug: quoting_function
  fr:
    def: 'A function that is passed expressions rather than the values of those expressions.

      '
    term: quoting function
- slug: r_consortium
  fr:
    def: 'A group that supports the worldwide community of users, maintainers and
      developers of [R](#r_language). Its members include leading institutions and
      companies dedicated to the use, development, and growth of R.

      '
    term: R Consortium
- slug: r_foundation
  fr:
    def: 'A non-profit founded by the R development core team providing support for
      [R](#r_language). It is a member of the [R Consortium](#r_consortium).

      '
    term: R Foundation
- slug: r_hub
  fr:
    def: 'A free platform available to check an [R](#r_language) [package](#package)
      on several different platforms in preparation for the CRAN submission process.

      '
    term: R Hub
- slug: raise_exception
  fr:
    def: 'To signal that something unexpected or unusual has happened in a program
      by creating an [exception](#exception) and handing it to the [error-handling](#error_handling)
      system, which then tries to find a point in the program that will [catch](#catch_exception)
      it.

      '
    term: raise (an exception)
- slug: random_forests
  fr:
    def: 'An algorithm used for regression or [classification](#classification) that
      uses a collection of [decision trees](#decision_tree), called a forest. Each
      tree votes for a classification, and the algorithm chooses the classification
      having the most votes over all the trees in the forest.

      '
    term: random forests
- slug: raster_image
  fr:
    def: 'An image stored as a matrix of pixels.

      '
    term: raster image
- slug: reactive_programming
  fr:
    def: 'A style of programming in which actions are triggered by external events.

      '
    term: reactive programming
- slug: reactive_variable
  fr:
    def: 'A variable whose value is automatically updated when some other value or
      values change. Reactive variables are used extensively in [Shiny](#shiny).

      '
    term: reactive variable
- slug: repl
  fr:
    def: 'An interactive program that reads a command typed in by a user, executes
      it, prints the result, and then waits patiently for the next command. REPLs
      are often used to explore new ideas, or for [debugging](#debug).

      '
    term: read-eval-print loop
- slug: readme
  fr:
    def: 'A plain text file containing important information about a project or software
      package.

      '
    term: README
- slug: reciprocal
  fr:
    def: 'The reciprocal of a number x is 1 / x, or alternatively x raised to the
      power of -1.

      '
    term: reciprocal
- slug: rnn
  fr:
    def: 'A class of [artificial neural networks](#neural_network) where connections
      between nodes can create a cycle. This allows the network to exhibit behavior
      that is dynamic over time. This type of network is applicable to tasks like
      speech and handwriting recognition.

      '
    term: recurrent neural network
- slug: recycle
  fr:
    def: 'To re-use values from a shorter [vector](#vector) in order to generate a
      sequence of the same length as a longer one. In [Python](#python) NumPy, this
      is called broadcasting.

      '
    term: recycle
- slug: redirection
  fr:
    def: 'To send a request for a web page or web service to a different page or service.

      '
    term: redirection
- slug: refactoring
  fr:
    def: 'Reorganizing software without changing its behavior.

      '
    term: refactoring
- slug: regression_testing
  fr:
    def: 'Testing software to ensure that things which used to work have not been
      broken.

      '
    term: regression testing
- slug: regular_expression
  fr:
    def: 'A pattern for matching text, written as text itself. Regular expressions
      are sometimes called "regexp", "regex", or "RE", and are powerful tools for
      working with text.

      '
    term: regular expression
- slug: reinforcement_learning
  fr:
    def: 'Any [machine learning](#machine_learning) algorithm which is not given specific
      goals to meet, but instead is given feedback on whether or not it is making
      progress.

      '
    term: reinforcement learning
- slug: relative_row_number
  fr:
    def: 'The index of a row in a displayed portion of a table, which may or may not
      be the same as the [absolute row number](#absolute_row_number) within the table.

      '
    term: relative row number
- slug: remote_login
  fr:
    def: 'Starting an interactive session on one computer from another computer, e.g.,
      by using [SSH](#ssh).

      '
    term: remote login
- slug: remote_repository
  fr:
    def: 'A [repository](#repository) located on another computer. Tools such as [Git](#git)
      are designed to synchronize changes between local and remote repositories in
      order to share work.

      '
    term: remote repository
- slug: repository
  fr:
    def: 'A place where a [version control system](#version_control_system) stores
      the files that make up a project and the metadata that describes their history.

      '
    term: repository
- slug: reprex
  fr:
    def: 'A reproducible example. When asking questions about coding problems online
      or filing issues on [GitHub](#github), you should always include a reprex so
      others can reproduce your problem and help. The [reprex](https://github.com/tidyverse/reprex)
      package can help!

      '
    term: reprex
- slug: reproducible_example
  fr:
    def: 'See [reprex](#reprex).

      '
    term: reproducible example
- slug: reproducible_research
  fr:
    def: 'The practice of describing and documenting research results in such a way
      that another researcher or person can re-run the analysis code on the same data
      to obtain the same result.

      '
    term: reproducible research
- slug: rse
  fr:
    def: 'Someone whose primary responsibility is to build the specialized software
      that other researchers depend on.

      '
    term: research software engineer
- slug: rseng
  fr:
    def: 'The practice of and methods for building the specialized software that other
      researchers depend on.

      '
    term: research software engineering
- slug: reserved_word
  fr:
    def: 'A word (character string) with a distinct meaning for a programming or scripting
      language. Typically, reserved words cannot be used as names for variables or
      constants, as this would confuse the compiler or interpreter.

      '
    term: reserved word
- slug: restructured_text
  fr:
    def: 'A plaintext [markup](#markup_language) format used primarily in [Python](#python)
      documentation.

      '
    term: reStructured Text
- slug: revision
  fr:
    def: 'See [commit](#commit).

      '
    term: revision
- slug: right_join
  fr:
    def: 'A [join](#join) that combines data from two tables, A and B. Where [keys](#key)
      in table A match keys in table B, [fields](#field) are concatenated. Where a
      key in table B does *not* match a key in table A, columns from table A are filled
      with [null](#null), [NA](#na), or some other [missing value](#missing_value)
      signifier. Keys from table A that do not exist in table B are dropped.

      '
    term: right join
- slug: roc_curve
  fr:
    def: 'A ROC curve (Receiver Operating Characteristic curve) is a graph that displays
      the performance of a binary classifier at different [classification](#classification)
      thresholds. The curve is obtained by plotting the True Positive Rate (also known
      as Recall or [Sensitivity](#sensitivity)) along the vertical axis and the False
      Positive Rate along the horizontal axis.

      '
    term: ROC Curve
- slug: root_tree
  fr:
    def: 'The [node](#node) in a [tree](#tree) of which all other nodes are direct
      or indirect [children](#child_tree), or equivalently the only node in the tree
      that has no [parent](#parent_tree).

      '
    term: root (in a tree)
- slug: root_directory
  fr:
    def: 'The [directory](#directory) that contains everything else, either directly
      or indirectly. The root directory is written `/` (a bare forward slash).

      '
    term: root directory
- slug: root_mean_squared_error
  fr:
    def: 'The [square root](#square_root) of the [mean squared error](#mean_squared_error).
      Like the [standard deviation](#standard_deviation), it is in the same units
      as the original data.

      '
    term: root mean squared error
- slug: rotating_file
  fr:
    def: 'A set of files used to store recent information. For example, there might
      be one file with results for each day of the week, so that results from last
      Tuesday are overwritten this Tuesday.

      '
    term: rotating file
- slug: s_language
  fr:
    def: 'A language originally developed in Bell Labs for data analysis, statistical
      modeling, and graphics. [R](#r_language) is a dialect of S.

      '
    term: S
- slug: s3
  fr:
    def: 'A framework for [object-oriented programming](#oop) in [R](#r_language).

      '
    term: S3
- slug: s4
  fr:
    def: 'A framework for [object-oriented programming](#oop) in [R](#r_language).

      '
    term: S4
- slug: sandbox
  fr:
    def: 'A testing environment that is separate from the production system, or an
      environment that is only allowed to perform a restricted set of operations for
      security reasons.

      '
    term: sandbox
- slug: sanity_check
  fr:
    def: 'A basic test to see if the outcome of a calculation, script or analysis
      makes sense or is true. This can be performed by visualisation or by simply
      inspecting the outcome.

      '
    term: sanity check
- slug: scalar
  fr:
    def: 'A single value of a particular type, such as 1 or "a". Scalars exist in
      most languages, but do not really exist in [R](#r_language); in R, values that
      appear to be scalars are actually [vectors](#vector) of unit length.

      '
    term: scalar
- slug: scope
  fr:
    def: 'The portion of a program within which a definition can be seen and used.
      See [closure](#closure), [global variable](#global_variable), and [local variable](#local_variable).

      '
    term: scope
- slug: script
  fr:
    def: 'Originally, a program written in a language too user-friendly for "real"
      programmers to take seriously; the term is now synonymous with program.

      '
    term: script
- slug: search_path
  fr:
    def: 'The list of directories that a program searches to find something. For example,
      the Unix [shell](#shell) uses the search path stored in the `PATH` variable
      when trying to find a program whose name it has been given.

      '
    term: search path
- slug: ssh
  fr:
    def: 'A protocol and the program that implements it which allows remote access
      to a server through a secure channel where all information is encrypted.

      '
    term: Secure Shell
- slug: seed
  fr:
    def: 'A value used to initialize a [pseudo-random number generator](#prng).

      '
    term: seed
- slug: select
  fr:
    def: 'To choose entire columns or rows from a table by name or location.

      '
    term: select
- slug: selecting_on_the_dependent_variable_bias
  fr:
    def: 'A study that only includes cases where the dependent variable shows the
      same value, instead of cases with different values in the dependent variable,
      is a study affected by selecting on the dependent variable bias.

      '
    term: selecting on the dependent variable bias
- slug: self_join
  fr:
    def: 'A [join](#join) that combines a table with itself.

      '
    term: self join
- slug: semantic_versioning
  fr:
    def: 'A standard for identifying software releases. In the version identifier
      `major.minor.patch`, `major` changes when a new version of software is incompatible
      with old versions, `minor` changes when new features are added to an existing
      version, and `patch` changes when small [bugs](#bug) are fixed.

      '
    term: semantic versioning
- slug: sense_vote
  fr:
    def: 'A preliminary vote used to determine whether further discussion is needed
      in a meeting.

      '
    term: sense vote
- slug: sensitivity
  fr:
    def: 'Statistical measure of a classification model which gives the True Positive
      rate. For example, the proportion of people who have a disease that test positive.
      Calculated as Sensitivity = TP/(TP+FN).

      '
    term: sensitivity
- slug: sequential_data
  fr:
    def: 'Any list of data items where the order is an inherent property of the list.
      Often the next item in the list is dependent on the previous item or items.

      '
    term: sequential data
- slug: server
  fr:
    def: 'Typically, a program such as a database manager or web server that provides
      data to a [client](#client) upon request.

      '
    term: server
- slug: shader
  fr:
    def: 'A program designed to run on the [GPU][gpu]. Generally used in graphics
      to calculate lighting or position vertices in a scene, though can be used for
      more general programming through the use of [compute shaders][#compute_shader].

      '
    term: shader
- slug: shebang
  fr:
    def: 'In Unix, a character sequence such as `#!/usr/bin/python` in the first line
      of an executable file that tells the [shell](#shell) what program to use to
      run that file.

      '
    term: shebang
- slug: shell
  fr:
    def: 'A [command-line interface](#cli) that allows a user to interact with the
      [operating system](#operating_system), such as Bash (for Unix and MacOS) or
      PowerShell (for Windows).

      '
    term: shell
- slug: shell_script
  fr:
    def: 'A set of commands for the [shell](#shell) stored in a file so that they
      can be re-executed. A shell script is effectively a program.

      '
    term: shell script
- slug: shell_variable
  fr:
    def: 'A variable set and used in the [Unix shell](#shell). Commonly used shell
      variables include `HOME` (the user''s home directory) and `PATH` (their [search
      path](#search_path)).

      '
    term: shell variable
- slug: shiny
  fr:
    def: 'A [R](#r_language) [package](#package) that makes it simple to build web
      applications to interactively visualise and manipulate data. Often used to make
      interactive [graphs](graph) and [tables](#table) straight from [R](#r_language)
      without having to know [HTML](#html), [CSS](#css) or JavaScript.

      '
    term: Shiny
- slug: short_circuit_test
  fr:
    def: 'A logical test that only evaluates as many arguments as it needs to. For
      example, if `A` is [false](#false), then most languages never evaluate `B` in
      the expression `A and B`.

      '
    term: short circuit test
- slug: short_identifier_git
  fr:
    def: 'The first few characters of a [full identifier](#full_identifier_git). Short
      identifiers are easy for people to type and say aloud, and are usually unique
      within a [repository''s](#repository) recent history.

      '
    term: short identifier (of commit)
- slug: short_option
  fr:
    def: 'A single-letter identifier for a [command-line argument](#command_line_argument).
      Most common flags are a single letter preceded by a dash, such as `-v`.

      '
    term: short option
- slug: side_effect
  fr:
    def: 'A change made by a function while it runs that is visible after the function
      finishes, such as modifying a [global variable](#global_variable) or writing
      to a file. Side effects make programs harder for people to understand, since
      the effects are not necessarily clear at the point in the program where the
      function is called.

      '
    term: side effect
- slug: signal
  fr:
    def: 'A way of indicating that something has gone wrong in a program, or that
      some other unexpected event has occurred. [R](#r_language) prefers "signalling
      a condition" to "raising an exception". [Python](#python), on the other hand,
      encourages [raising](#raise_exception) and [catching exceptions](#catch_exception),
      and in some situations, requires it.

      '
    term: signal (a condition)
- slug: smtp
  fr:
    def: 'A standard internet communication protocol for transmitting [email](#email).

      '
    term: Simple Mail Transfer Protocol
- slug: smtps
  fr:
    def: 'A method for securing [SMTP](#smtp) using [TLS](#tls).

      '
    term: Simple Mail Transfer Protocol Secure
- slug: single_square_brackets
  fr:
    def: 'One set of square brackets `[ ]`, used to select a structure from another
      structure based on an index value, or range of values, inside the square brackets.

      '
    term: single square brackets
- slug: single_threaded
  fr:
    def: 'A model of program execution in which only one thing can happen at a time.
      Single-threaded execution is easier for people to understand, but less efficient
      than [multi-threaded](#multi_threaded) execution.

      '
    term: single-threaded
- slug: singleton
  fr:
    def: 'A set with only one element, or a [class](#class) with only one [instance](#instance).

      '
    term: singleton
- slug: singleton_pattern
  fr:
    def: 'A [design pattern](#design_pattern) that creates a [singleton](#singleton)
      [object](#object) to manage some resource or service, such as a database or
      [cache](#cache). In [object-oriented programming](#oop), the pattern is usually
      implemented by hiding the [constructor](#constructor) of the [class](#class)
      in some way so that it can only be called once.

      '
    term: Singleton pattern
- slug: slug
  fr:
    def: 'An abbreviated portion of a page''s URL that uniquely identifies it. In
      the example `https://www.mysite.com/category/post-name`, the slug is `post-name`.

      '
    term: slug
- slug: snake_case
  fr:
    def: 'See [pothole case](#pothole_case).

      '
    term: snake case
- slug: software_distribution
  fr:
    def: 'A set of programs that are built, tested, and distributed as a collection
      so that they can run together.

      '
    term: software distribution
- slug: source_code
  fr:
    def: 'Source code or, simply, code, is the origin of executed code (either by
      means of an interpreter or compiler). It''s the primarily human-produced series
      of commands that make up a program. (Note: Automatic code generators exist for
      some applications)

      '
    term: source code
- slug: source_distribution
  fr:
    def: 'A [software distribution](#software_distribution) that includes the source
      code, typically so that programs can be recompiled on the target computer when
      they are installed.

      '
    term: source distribution
- slug: specificity
  fr:
    def: 'Statistical measure of a classification model which gives the True Negative
      rate. For example, the proportion of people who do not have a disease that test
      negative. Calculated as Specificity = TN/(TN+FP).

      '
    term: specificity
- slug: spectral_analysis
  fr:
    def: 'From a finite record of a stationary data sequence, estimate how the total
      power is distributed over frequency. See also "spectrum analysis problem".

      '
    term: spectral analysis
- slug: sprint
  fr:
    def: 'A short, intense period of work on a project.

      '
    term: sprint
- slug: square_root
  fr:
    def: 'A special case of the [n-th root](#root_math) for which n = 2, i.e. the
      2-nd root has the special name "square root".

      '
    term: Square root
- slug: ssh_key
  fr:
    def: 'A string of random bits stored in a file that is used to identify a user
      for [SSH](#ssh). Each SSH key has separate public and private parts; the public
      part can safely be shared, but if the private part becomes known, the key is
      compromised.

      '
    term: SSH key
- slug: stack_frame
  fr:
    def: 'A section of the [call stack](#call_stack) that records details of a single
      call to a specific function.

      '
    term: stack frame
- slug: stack_overflow
  fr:
    def: 'A question-and-answer site popular among programmers.

      '
    term: Stack Overflow
- slug: build_stale
  fr:
    def: 'To be out-of-date compared to a [prerequisite](#prerequisite). A [build
      manager](#build_manager)''s job is to find and update things that are stale.

      '
    term: stale (in build)
- slug: standard_deviation
  fr:
    def: 'How widely values in a dataset differ from the [mean](#mean). It is calculated
      as the square root of the [variance](#variance).

      '
    term: standard deviation
- slug: stderr
  fr:
    def: 'A predefined communication channel for a [process](#process), typically
      used for error messages.

      '
    term: standard error
- slug: stdin
  fr:
    def: 'A predefined communication channel for a [process](#process), typically
      used to read input from the keyboard or from the previous process in a [pipe](#pipe_shell).

      '
    term: standard input
- slug: standard_normal_distribution
  fr:
    def: 'A [normal distribution](#normal_distribution) with a [mean](#mean) of 0
      and a [standard deviation](#standard_deviation) of 1. Values from normal distributions
      with other [parameters](#parameter) can easily be rescaled to be on a standard
      normal distribution.

      '
    term: standard normal distribution
- slug: stdout
  fr:
    def: 'A predefined communication channel for a [process](#process), typically
      used to send output to the screen or to the next process in a [pipe](#pipe_shell).

      '
    term: standard output
- slug: stratified_sampling
  fr:
    def: 'Selecting values by dividing the overall population into [homogeneous](#homogeneous)
      groups and then taking a random sample from each group.

      '
    term: stratified sampling
- slug: stream
  fr:
    def: 'A sequential flow of data, such as the [bits](#bit) arriving across a network
      connection or the bytes read from a file.

      '
    term: stream
- slug: string
  fr:
    def: 'A block of text in a program. The term is short for "character string".

      '
    term: string
- slug: string_interpolation
  fr:
    def: 'The process of inserting text corresponding to specified values into a [string](#string),
      usually to make output human-readable.

      '
    term: string interpolation
- slug: students_t_distribution
  fr:
    def: 'See [t-distribution](#t_distribution).

      '
    term: student's t-distribution
- slug: subcommand
  fr:
    def: 'A command that is part of a larger family of commands. For example, `git
      commit` is a subcommand of [Git](#git).

      '
    term: subcommand
- slug: subdirectory
  fr:
    def: 'A directory that is below another directory.

      '
    term: subdirectory
- slug: supervised_learning
  fr:
    def: 'A [machine learning](#machine_learning) algorithm in which a system is taught
      to [classify](#classification) values given [training data](#training_data)
      containing previously-classified values.

      '
    term: supervised learning
- slug: svm
  fr:
    def: 'A [supervised learning](#supervised_learning) algorithm that seeks to divide
      points in a dataset so that the empty space between the resultant sets is as
      wide as possible.

      '
    term: support vector machine
- slug: systematic_error
  fr:
    def: 'See [bias](#bias).

      '
    term: systematic error
- slug: t_distribution
  fr:
    def: 'A variation on the [normal distribution](#normal_distribution) that is adjusted
      to account for estimating [variance](#variance) from the sample instead of knowing
      it in advance.

      '
    term: t-distribution
- slug: tab_completion
  fr:
    def: 'A technique implemented by most [REPLs](#repl), [shells](#shell), and programming
      editors that completes a command, variable name, filename, or other text when
      the TAB key is pressed.

      '
    term: tab completion
- slug: tag
  fr:
    def: 'A readable label attached to a specific [commit](#commit) so that it can
      easily be referenced later.

      '
    term: tag (in version control)
- slug: template_method_pattern
  fr:
    def: 'A [design pattern](#design_pattern) in which a [parent class](#parent_class)
      defines an overall sequence of operations by calling [abstract methods](#abstract_method)
      that [child classes](#child_class) must then implement. Each child class then
      behaves in the same general way, but implements the steps differently.

      '
    term: Template Method pattern
- slug: ternary_expression
  fr:
    def: 'An expression that has three parts. [Conditional expressions](#conditional_expression)
      are the only ternary expressions in most languages.

      '
    term: ternary expression
- slug: tessellation_shader
  fr:
    def: 'The [shader](#shader) stage in the rendering pipeline designated towards
      subdividing primitives to increase the resolution of a mesh without impacting
      memory. Not to be confused with [geometry shaders](#geometry_shader) which change
      the overall shape.

      '
    term: tessellation shader
- slug: test_data
  fr:
    def: 'Test data is a portion of a dataset used to evaluate the correctness of
      a [machine learning](#machine_learning) algorithm after it has been trained.
      It should always be separated from the [training data](#training_data) to ensure
      that the model is properly tested with unseen data.

      '
    term: test data
- slug: test_runner
  fr:
    def: 'A program that finds and runs software tests and reports their results.

      '
    term: test runner
- slug: tdd
  fr:
    def: 'A programming practice in which tests are written before a new feature is
      added or a [bug](#bug) is fixed in order to clarify the goal.

      '
    term: test-driven development
- slug: three_vs
  fr:
    def: 'The volume, velocity, and variety that distinguish [big data](#big_data).

      '
    term: three Vs
- slug: throw_exception
  fr:
    def: 'Another term for [raising](#raise_exception) an exception.

      '
    term: throw (exception)
- slug: ticket
  fr:
    def: 'See [issue](#issue).

      '
    term: ticket
- slug: ticketing_system
  fr:
    def: 'See [issue tracking system](#issue_tracking_system).

      '
    term: ticketing system
- slug: tidy_data
  fr:
    def: "Tabular data that satisfies [three conditions](https://vita.had.co.nz/papers/tidy-data.pdf)\
      \ that facilitate initial cleaning, and later exploration and analysis\u2014\
      (1) each variable forms a column, (2) each observation forms a row, and (3)\
      \ each type of observation unit forms a table.\n"
    term: tidy data
- slug: time_series
  fr:
    def: 'A set of measurements taken at different times, which may or may not be
      regular intervals.

      '
    term: time series
- slug: timestamp
  fr:
    def: 'A digital identifier showing the time at which something was created or
      accessed. Timestamps should use [ISO date format](#iso_date_format) for portability.

      '
    term: timestamp
- slug: tolerance
  fr:
    def: 'How closely the [actual result](#actual_result) of a test must agree with
      the [expected result](#expected_result) in order for the test to pass. Tolerances
      are usually expressed in terms of [relative error](#relative_error).

      '
    term: tolerance
- slug: training_data
  fr:
    def: 'Training data is a portion of a dataset used to train [machine learning](#machine_learning)
      algorithm to recognise similar data. It should always be separated from the
      [test data](#test_data) to ensure that the model is properly tested with data
      it has never seen before.

      '
    term: training data
- slug: transfer_learning
  fr:
    def: 'Transfer learning is a specific form of deep learning that has 2 stages.
      First, in the pre-training  phase, a neural network is trained on a (typically
      large) generic dataset. Second, the  fine-tuning phase, the neural network is
      adapted to the specifics of a (typically smaller) new  dataset. The idea is
      that the network will capture generic knowledge in the pre-training phase  that
      is relevant for learning in the fine-tuning task.

      '
    term: transfer learning (deep learning)
- slug: transitive_dependency
  fr:
    def: 'If A depends on B and B depends on C, C is a transitive dependency of A.

      '
    term: transitive dependency
- slug: tls
  fr:
    def: 'A cryptographic protocol for securing communications over a computer network.

      '
    term: Transport Layer Security
- slug: tree
  fr:
    def: 'A [graph](#graph) in which every node except the [root](#root_tree) has
      exactly one [parent](#parent_tree).

      '
    term: tree
- slug: triage
  fr:
    def: 'To go through the [issues](#issue) associated with a project and decide
      which are currently priorities. Triage is one of the key responsibilities of
      a [project manager](#project_manager).

      '
    term: triage
- slug: 'true'
  fr:
    def: 'The logical ([Boolean](#boolean)) state opposite of "[false](#false)". Used
      in logic and programming to represent a [binary](#binary) state of something.

      '
    term: 'true'
- slug: true_negative
  fr:
    def: 'Data points which are actually [false](#false) and correctly predicted as
      [false](#false).

      '
    term: true negative
- slug: true_positive
  fr:
    def: 'Data points which are actually [true](#true) and correctly predicted as
      [true](#true).

      '
    term: true positive
- slug: truthy
  fr:
    def: 'Evaluating to [true](#true) in a [Boolean](#boolean) context.

      '
    term: truthy
- slug: two_hard_problems
  fr:
    def: "Refers to a quote by Phil Karlton\u2014\"There are only two hard problems\
      \ in computer science\u2014cache invalidation and naming things.\" Many variations\
      \ add a third problem (most often \"[off-by-one errors](#off_by_one_error)\"\
      ).\n"
    term: two hard problems in computer science
- slug: type_coercion
  fr:
    def: 'To convert data from one type to another, e.g., from the integer `4` to
      the equivalent floating point number `4.0`.

      '
    term: type coercion
- slug: unary_expression
  fr:
    def: 'An expression with one argument, such as `log 5`.

      '
    term: unary expression
- slug: url
  fr:
    def: 'A unique address on the World-Wide Web. URLs originally identified web pages,
      but may also represent datasets or database queries, particularly if they include
      a [query string](#query_string).

      '
    term: Uniform Resource Locator
- slug: unit_test
  fr:
    def: 'A test that exercises one function or feature of a piece of software and
      produces [pass](#pass_test), [fail](#fail_test), or [error](#error_test).

      '
    term: unit test
- slug: unix
  fr:
    def: 'UNIX is a family of [operating systems](#operating_system) developed during
      1969 at AT&T Bell Labs. Its main features are simple tools, well-defined functionality
      and being portable by nature.

      '
    term: UNIX
- slug: unsupervised_learning
  fr:
    def: 'Algorithms that [cluster](#clustering) data without knowing in advance what
      the groups will be.

      '
    term: unsupervised learning
- slug: up_vote
  fr:
    def: 'A vote in favor of something.

      '
    term: up-vote
- slug: update_operator
  fr:
    def: 'See [in-place operator](#in_place_operator).

      '
    term: update operator
- slug: upstream_repository
  fr:
    def: 'The [remote repository](#remote_repository) from which this [repository](#repository)
      was derived. Programmers typically save changes in their own repository and
      then submit a [pull request](#pull_request) to the upstream repository where
      changes from other programmers are also collected.

      '
    term: upstream repository
- slug: user_interface
  fr:
    def: 'Platform for interaction between a user and a machine. The interaction may
      occur via text (a [command line interface](#cli)), graphics and windows (a [graphical
      user interface](#gui)), or other methods such as voice-driven interfaces.

      '
    term: user interface
- slug: utf_8
  fr:
    def: 'A way to store the numeric codes representing [Unicode](#unicode) characters
      in memory that is [backward-compatible](#backward_compatible) with the older
      [ASCII](#ascii) standard.

      '
    term: UTF-8
- slug: variable_data
  fr:
    def: 'Some attribute of a population that can be measured or observed.

      '
    term: variable (data)
- slug: variance
  fr:
    def: 'How widely values in a dataset differ from the [mean](#mean). It is calculated
      as the average of the squared differences between the values and the mean. The
      [standard deviation](#standard_deviation) is often used instead, since it has
      the same units as the data, while the variance is expressed in units squared.

      '
    term: variance
- slug: vector
  fr:
    def: 'A sequence of values, usually of [homogeneous](#homogeneous) type. Vectors
      are the fundamental data structure in [R](#r_language); a [scalar](#scalar)
      is just a vector with exactly one [element](#element).

      '
    term: vector
- slug: vectorize
  fr:
    def: 'To write code so that operations are performed on entire vectors, rather
      than element-by-element within loops.

      '
    term: vectorize
- slug: vertex_shader
  fr:
    def: 'The [shader](#shader) stage in the rendering pipeline designated towards
      handling operations on individual vertices in a scene. A vertex shader can be
      used to calculate properties of a single vertex, such as position and per-vertex
      lighting. Not to be confused with [fragment shaders](#fragment_shader) which
      are used to determine the actual colour being rendered to each pixel of the
      screen.

      '
    term: vertex shader
- slug: vignette
  fr:
    def: 'A long-form guide used to provide details of a [package](#package) beyond
      the README.md or function documentation.

      '
    term: vignette
- slug: vim
  fr:
    def: 'The default text editor on Unix. Vim is a very powerful text editor, with
      a steeper learning curve than [nano](#nano_editor), but that allows the user
      to execute shell commands and use [regular expressions](#regular_expression)
      to alter files programmatically.

      '
    term: Vim (editor)
- slug: virtual_environment
  fr:
    def: 'In [Python](#python), the `virtualenv` [package](#package) allows you to
      create virtual, disposable, [Python](#python) software environments containing
      only the packages and versions of packages you want to use for a particular
      project or task, and to install new packages into the environment without affecting
      other virtual environments, or the system-wide default environment.

      '
    term: virtual environment
- slug: virtual_machine
  fr:
    def: 'A program that pretends to be a computer. This may seem a bit redundant,
      but VMs are quick to create and start up, and changes made inside the virtual
      machine are contained within that VM so we can install new [packages](#package)
      or run a completely different operating system without affecting the underlying
      computer.

      '
    term: virtual machine
- slug: visitor_pattern
  fr:
    def: 'A [design pattern](#design_pattern) in which the operation to be done is
      taken to each element of a data structure in turn. It is usually implemented
      by having a generator "visitor" that knows how to reach the structure''s elements,
      which is given a function or method to call for each in turn, and that carries
      out the specific operation.

      '
    term: Visitor pattern
- slug: walk_tree
  fr:
    def: 'To visit each [node](#node) in a [tree](#tree) in some order, typically
      [depth-first](#depth_first) or [breadth-first](#breadth_first).

      '
    term: walk (a tree)
- slug: while_loop
  fr:
    def: 'A statement in a program that repeats one or more other statements (the
      [loop body](#loop_body)) as long as a condition is [true](#true).

      '
    term: while loop
- slug: whitespace
  fr:
    def: 'The space, newline, carriage return, and horizontal and vertical tab characters
      that take up space but do not create a visible mark. The name comes from their
      appearance on a printed page in the era of typewriters.

      '
    term: whitespace
- slug: wildcard
  fr:
    def: 'A character expression that can match text, such as the `*` in `*.csv` (which
      matches any filename whose name ends with `.csv`).

      '
    term: wildcard
- slug: workflow
  fr:
    def: 'A way of describing work to be done as a set of tasks, typically with dependencies
      on external inputs or the outputs of other tasks, which can later be executed
      by a program. An example is a Makefile which can be executed by the make Unix
      command.

      '
    term: workflow
